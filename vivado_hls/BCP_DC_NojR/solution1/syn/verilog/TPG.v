// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TPG (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_int_V,
        r_0_shift_reg_V_i,
        r_0_shift_reg_V_o,
        r_0_shift_reg_V_o_ap_vld,
        r_1_shift_reg_V_i,
        r_1_shift_reg_V_o,
        r_1_shift_reg_V_o_ap_vld,
        r_2_shift_reg_V_i,
        r_2_shift_reg_V_o,
        r_2_shift_reg_V_o_ap_vld,
        r_3_shift_reg_V_i,
        r_3_shift_reg_V_o,
        r_3_shift_reg_V_o_ap_vld,
        r_0_peak_reg_V_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv16_3FF = 16'b1111111111;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv13_1F96 = 13'b1111110010110;
parameter    ap_const_lv21_B7 = 21'b10110111;
parameter    ap_const_lv25_1FFFFDD = 25'b1111111111111111111011101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [13:0] data_int_V;
input  [13:0] r_0_shift_reg_V_i;
output  [13:0] r_0_shift_reg_V_o;
output   r_0_shift_reg_V_o_ap_vld;
input  [13:0] r_1_shift_reg_V_i;
output  [13:0] r_1_shift_reg_V_o;
output   r_1_shift_reg_V_o_ap_vld;
input  [13:0] r_2_shift_reg_V_i;
output  [13:0] r_2_shift_reg_V_o;
output   r_2_shift_reg_V_o_ap_vld;
input  [13:0] r_3_shift_reg_V_i;
output  [13:0] r_3_shift_reg_V_o;
output   r_3_shift_reg_V_o_ap_vld;
input  [18:0] r_0_peak_reg_V_read;
output  [15:0] ap_return_0;
output  [18:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_0_shift_reg_V_o_ap_vld;
reg r_1_shift_reg_V_o_ap_vld;
reg r_2_shift_reg_V_o_ap_vld;
reg r_3_shift_reg_V_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [18:0] r_0_peak_reg_V_read_1_reg_460;
reg   [18:0] ap_pipeline_reg_pp0_iter1_r_0_peak_reg_V_read_1_reg_460;
reg   [13:0] tmp_s_reg_467;
reg   [13:0] r_3_shift_reg_V_rea_reg_473;
reg   [13:0] r_0_shift_reg_V_rea_reg_479;
reg   [18:0] mul_V_reg_485;
reg   [11:0] tmp_6_reg_490;
wire   [0:0] icmp_fu_210_p2;
reg   [0:0] icmp_reg_495;
reg   [0:0] ap_pipeline_reg_pp0_iter1_icmp_reg_495;
wire   [18:0] r_0_peak_reg_V_writ_fu_388_p2;
reg   [18:0] r_0_peak_reg_V_writ_reg_500;
wire   [11:0] uncorrectedADC_V_fu_155_p1;
wire  signed [20:0] grp_fu_444_p3;
wire  signed [17:0] extLd3_fu_173_p1;
wire  signed [24:0] r_V_4_fu_453_p2;
wire   [6:0] tmp_15_fu_200_p4;
wire   [18:0] tmp_11_fu_219_p3;
wire  signed [22:0] p_shl_fu_226_p1;
wire   [23:0] p_shl_cast_fu_230_p1;
wire   [23:0] p_neg_fu_234_p2;
wire   [15:0] tmp_14_fu_244_p3;
wire  signed [19:0] p_shl1_fu_251_p1;
wire  signed [24:0] p_neg_cast_fu_240_p1;
wire   [24:0] p_shl1_cast_fu_255_p1;
wire   [24:0] r_V_2_fu_259_p2;
wire  signed [15:0] tmp_7_fu_275_p1;
wire  signed [17:0] extLd_fu_216_p1;
wire   [18:0] tmp_fu_286_p3;
wire  signed [22:0] p_shl2_fu_293_p1;
wire   [23:0] p_shl2_cast_fu_297_p1;
wire   [23:0] lhs_V_4_2_cast7_fu_282_p1;
wire   [23:0] r_V_4_2_fu_301_p2;
wire   [17:0] tmp_9_fu_307_p4;
wire   [18:0] tmp_4_fu_321_p3;
wire  signed [22:0] p_shl3_fu_328_p1;
wire   [16:0] tmp_5_fu_336_p3;
wire  signed [20:0] p_shl4_fu_343_p1;
wire   [23:0] p_shl3_cast_fu_332_p1;
wire   [23:0] p_shl4_cast_fu_347_p1;
wire   [23:0] r_V_4_3_fu_351_p2;
wire   [17:0] tmp_12_fu_357_p4;
wire   [18:0] tmp_22_1_cast_fu_278_p1;
wire  signed [18:0] tmp_10_fu_317_p1;
wire   [18:0] tmp_529_fu_265_p4;
wire  signed [18:0] tmp_13_fu_367_p1;
wire   [18:0] tmp5_fu_377_p2;
wire   [18:0] tmp4_fu_383_p2;
wire   [18:0] tmp3_fu_371_p2;
wire   [0:0] tmp_1_fu_394_p2;
wire   [0:0] tmp_2_fu_398_p2;
wire   [15:0] tmp_8_fu_409_p4;
wire   [0:0] or_cond_fu_403_p2;
wire   [15:0] tmpPeak_V_fu_418_p3;
wire   [15:0] agg_result_V_1_fu_425_p3;
wire  signed [7:0] grp_fu_444_p0;
wire   [11:0] grp_fu_444_p1;
wire   [8:0] grp_fu_444_p2;
wire  signed [6:0] r_V_4_fu_453_p0;
wire   [17:0] r_V_4_fu_453_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_pipeline_idle_pp0;
reg    ap_pipeline_start_pp0;
wire   [12:0] grp_fu_444_p10;
wire   [24:0] r_V_4_fu_453_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

algo_unpacked_am_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 21 ))
algo_unpacked_am_bkb_U1(
    .din0(grp_fu_444_p0),
    .din1(grp_fu_444_p1),
    .din2(grp_fu_444_p2),
    .dout(grp_fu_444_p3)
);

algo_unpacked_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 25 ))
algo_unpacked_mulcud_U2(
    .din0(r_V_4_fu_453_p0),
    .din1(r_V_4_fu_453_p1),
    .dout(r_V_4_fu_453_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) | ~(1'b1 == ap_ce)))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) | ~(1'b1 == ap_ce))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        ap_pipeline_reg_pp0_iter1_icmp_reg_495 <= icmp_reg_495;
        ap_pipeline_reg_pp0_iter1_r_0_peak_reg_V_read_1_reg_460 <= r_0_peak_reg_V_read_1_reg_460;
        icmp_reg_495 <= icmp_fu_210_p2;
        mul_V_reg_485 <= {{r_V_4_fu_453_p2[ap_const_lv32_18 : ap_const_lv32_6]}};
        r_0_peak_reg_V_read_1_reg_460 <= r_0_peak_reg_V_read;
        r_0_peak_reg_V_writ_reg_500 <= r_0_peak_reg_V_writ_fu_388_p2;
        r_0_shift_reg_V_rea_reg_479 <= r_0_shift_reg_V_i;
        r_3_shift_reg_V_rea_reg_473 <= r_3_shift_reg_V_i;
        tmp_6_reg_490 <= {{r_1_shift_reg_V_i[ap_const_lv32_D : ap_const_lv32_2]}};
        tmp_s_reg_467 <= {{grp_fu_444_p3[ap_const_lv32_14 : ap_const_lv32_7]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0)) | (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_pipeline_idle_pp0 = 1'b1;
    end else begin
        ap_pipeline_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_start))) begin
        ap_pipeline_start_pp0 = 1'b1;
    end else begin
        ap_pipeline_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        r_0_shift_reg_V_o_ap_vld = 1'b1;
    end else begin
        r_0_shift_reg_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        r_1_shift_reg_V_o_ap_vld = 1'b1;
    end else begin
        r_1_shift_reg_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        r_2_shift_reg_V_o_ap_vld = 1'b1;
    end else begin
        r_2_shift_reg_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_pp0_stage0 == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b0)) & (1'b1 == ap_ce))) begin
        r_3_shift_reg_V_o_ap_vld = 1'b1;
    end else begin
        r_3_shift_reg_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_V_1_fu_425_p3 = ((or_cond_fu_403_p2[0:0] === 1'b1) ? tmpPeak_V_fu_418_p3 : ap_const_lv16_0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_0];

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = agg_result_V_1_fu_425_p3;

assign ap_return_1 = r_0_peak_reg_V_writ_reg_500;

assign extLd3_fu_173_p1 = $signed(r_2_shift_reg_V_i);

assign extLd_fu_216_p1 = $signed(r_0_shift_reg_V_rea_reg_479);

assign grp_fu_444_p0 = ap_const_lv13_1F96;

assign grp_fu_444_p1 = grp_fu_444_p10;

assign grp_fu_444_p10 = uncorrectedADC_V_fu_155_p1;

assign grp_fu_444_p2 = ap_const_lv21_B7;

assign icmp_fu_210_p2 = (($signed(tmp_15_fu_200_p4) > $signed(7'b0000000)) ? 1'b1 : 1'b0);

assign lhs_V_4_2_cast7_fu_282_p1 = $unsigned(extLd_fu_216_p1);

assign or_cond_fu_403_p2 = (tmp_1_fu_394_p2 & tmp_2_fu_398_p2);

assign p_neg_cast_fu_240_p1 = $signed(p_neg_fu_234_p2);

assign p_neg_fu_234_p2 = (ap_const_lv24_0 - p_shl_cast_fu_230_p1);

assign p_shl1_cast_fu_255_p1 = $unsigned(p_shl1_fu_251_p1);

assign p_shl1_fu_251_p1 = $signed(tmp_14_fu_244_p3);

assign p_shl2_cast_fu_297_p1 = $unsigned(p_shl2_fu_293_p1);

assign p_shl2_fu_293_p1 = $signed(tmp_fu_286_p3);

assign p_shl3_cast_fu_332_p1 = $unsigned(p_shl3_fu_328_p1);

assign p_shl3_fu_328_p1 = $signed(tmp_4_fu_321_p3);

assign p_shl4_cast_fu_347_p1 = $unsigned(p_shl4_fu_343_p1);

assign p_shl4_fu_343_p1 = $signed(tmp_5_fu_336_p3);

assign p_shl_cast_fu_230_p1 = $unsigned(p_shl_fu_226_p1);

assign p_shl_fu_226_p1 = $signed(tmp_11_fu_219_p3);

assign r_0_peak_reg_V_writ_fu_388_p2 = (tmp4_fu_383_p2 + tmp3_fu_371_p2);

assign r_0_shift_reg_V_o = {{grp_fu_444_p3[ap_const_lv32_14 : ap_const_lv32_7]}};

assign r_1_shift_reg_V_o = r_0_shift_reg_V_i;

assign r_2_shift_reg_V_o = r_1_shift_reg_V_i;

assign r_3_shift_reg_V_o = r_2_shift_reg_V_i;

assign r_V_2_fu_259_p2 = ($signed(p_neg_cast_fu_240_p1) - $signed(p_shl1_cast_fu_255_p1));

assign r_V_4_2_fu_301_p2 = (p_shl2_cast_fu_297_p1 - lhs_V_4_2_cast7_fu_282_p1);

assign r_V_4_3_fu_351_p2 = (p_shl3_cast_fu_332_p1 - p_shl4_cast_fu_347_p1);

assign r_V_4_fu_453_p0 = ap_const_lv25_1FFFFDD;

assign r_V_4_fu_453_p1 = r_V_4_fu_453_p10;

assign r_V_4_fu_453_p10 = $unsigned(extLd3_fu_173_p1);

assign tmp3_fu_371_p2 = ($signed(tmp_22_1_cast_fu_278_p1) + $signed(tmp_10_fu_317_p1));

assign tmp4_fu_383_p2 = (tmp5_fu_377_p2 + mul_V_reg_485);

assign tmp5_fu_377_p2 = ($signed(tmp_529_fu_265_p4) + $signed(tmp_13_fu_367_p1));

assign tmpPeak_V_fu_418_p3 = ((ap_pipeline_reg_pp0_iter1_icmp_reg_495[0:0] === 1'b1) ? ap_const_lv16_3FF : tmp_8_fu_409_p4);

assign tmp_10_fu_317_p1 = $signed(tmp_9_fu_307_p4);

assign tmp_11_fu_219_p3 = {{r_3_shift_reg_V_rea_reg_473}, {ap_const_lv5_0}};

assign tmp_12_fu_357_p4 = {{r_V_4_3_fu_351_p2[ap_const_lv32_17 : ap_const_lv32_6]}};

assign tmp_13_fu_367_p1 = $signed(tmp_12_fu_357_p4);

assign tmp_14_fu_244_p3 = {{r_3_shift_reg_V_rea_reg_473}, {ap_const_lv2_0}};

assign tmp_15_fu_200_p4 = {{r_0_peak_reg_V_read[ap_const_lv32_12 : ap_const_lv32_C]}};

assign tmp_1_fu_394_p2 = (($signed(r_0_peak_reg_V_writ_reg_500) < $signed(ap_pipeline_reg_pp0_iter1_r_0_peak_reg_V_read_1_reg_460)) ? 1'b1 : 1'b0);

assign tmp_22_1_cast_fu_278_p1 = $unsigned(tmp_7_fu_275_p1);

assign tmp_2_fu_398_p2 = (($signed(ap_pipeline_reg_pp0_iter1_r_0_peak_reg_V_read_1_reg_460) > $signed(19'b0000000000000000000)) ? 1'b1 : 1'b0);

assign tmp_4_fu_321_p3 = {{tmp_s_reg_467}, {ap_const_lv5_0}};

assign tmp_529_fu_265_p4 = {{r_V_2_fu_259_p2[ap_const_lv32_18 : ap_const_lv32_6]}};

assign tmp_5_fu_336_p3 = {{tmp_s_reg_467}, {ap_const_lv3_0}};

assign tmp_7_fu_275_p1 = $signed(tmp_6_reg_490);

assign tmp_8_fu_409_p4 = {{ap_pipeline_reg_pp0_iter1_r_0_peak_reg_V_read_1_reg_460[ap_const_lv32_11 : ap_const_lv32_2]}};

assign tmp_9_fu_307_p4 = {{r_V_4_2_fu_301_p2[ap_const_lv32_17 : ap_const_lv32_6]}};

assign tmp_fu_286_p3 = {{r_0_shift_reg_V_rea_reg_479}, {ap_const_lv5_0}};

assign uncorrectedADC_V_fu_155_p1 = data_int_V[11:0];

endmodule //TPG
