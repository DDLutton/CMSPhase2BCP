-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TPG is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_int_V : IN STD_LOGIC_VECTOR (13 downto 0);
    lincoeff_V : IN STD_LOGIC_VECTOR (23 downto 0);
    r_0_shift_reg_V_i : IN STD_LOGIC_VECTOR (17 downto 0);
    r_0_shift_reg_V_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    r_0_shift_reg_V_o_ap_vld : OUT STD_LOGIC;
    r_1_shift_reg_V_i : IN STD_LOGIC_VECTOR (17 downto 0);
    r_1_shift_reg_V_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    r_1_shift_reg_V_o_ap_vld : OUT STD_LOGIC;
    r_2_shift_reg_V_i : IN STD_LOGIC_VECTOR (17 downto 0);
    r_2_shift_reg_V_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    r_2_shift_reg_V_o_ap_vld : OUT STD_LOGIC;
    r_3_shift_reg_V_i : IN STD_LOGIC_VECTOR (17 downto 0);
    r_3_shift_reg_V_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    r_3_shift_reg_V_o_ap_vld : OUT STD_LOGIC;
    r_0_peak_reg_V_read : IN STD_LOGIC_VECTOR (18 downto 0);
    r_1_peak_reg_V_read : IN STD_LOGIC_VECTOR (18 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (18 downto 0) );
end;


architecture behav of TPG is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_3FF : STD_LOGIC_VECTOR (15 downto 0) := "0000001111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv25_1FFFFDD : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_0_peak_reg_V_read_1_reg_619 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg : STD_LOGIC_VECTOR (18 downto 0);
    signal linearizerOutput_V_1_fu_242_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal linearizerOutput_V_1_reg_625 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_0_shift_reg_V_rea_reg_631 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_578_reg_637 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_V_reg_642 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_18_1_reg_647 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_653 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_17_reg_658 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_2_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_668 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_668_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_673_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_678 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_678_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal filterOutput_V_fu_520_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal filterOutput_V_reg_683 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal uncorrectedADC_V_fu_185_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal base_V_fu_189_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lhs_V_fu_203_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal rhs_V_fu_207_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_3_fu_211_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mult_fu_193_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_604_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_7_fu_234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal linearizerOutput_V_fu_225_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_fu_251_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl_cast_fu_259_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_neg_fu_263_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl1_fu_273_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_neg_cast_fu_269_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl1_cast_fu_281_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_4_fu_285_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_6_fu_611_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_9_fu_355_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_fu_390_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl2_cast_fu_397_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lhs_V_3_2_cast7_fu_387_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_6_2_fu_401_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_407_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl3_fu_421_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl4_fu_432_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl3_cast_fu_428_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl4_cast_fu_439_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_6_3_fu_443_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_449_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_18_1_cast_fu_384_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_11_fu_417_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_14_fu_459_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp5_fu_469_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_381_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_16_fu_474_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp4_fu_479_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp3_fu_463_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_19_fu_484_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_fu_490_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal addconv_3_fu_495_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_8_fu_507_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addconv_3_cast_fu_501_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal filterOutput_V_cast_fu_528_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_3_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmpPeak_V_fu_541_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_551_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_547_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_cond1_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_phitmp3_fu_567_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal agg_result_V_1_fu_575_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal agg_result_V_1_cast_fu_583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_604_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_6_fu_611_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_6_fu_611_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_6_fu_611_p10 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_fu_604_p10 : STD_LOGIC_VECTOR (20 downto 0);

    component algo_unpacked_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component algo_unpacked_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    algo_unpacked_mulbkb_U1 : component algo_unpacked_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 8,
        dout_WIDTH => 21)
    port map (
        din0 => r_V_3_fu_211_p2,
        din1 => r_V_fu_604_p1,
        dout => r_V_fu_604_p2);

    algo_unpacked_mulcud_U2 : component algo_unpacked_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 18,
        dout_WIDTH => 25)
    port map (
        din0 => r_V_6_fu_611_p0,
        din1 => r_V_6_fu_611_p1,
        dout => r_V_6_fu_611_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                filterOutput_V_reg_683 <= filterOutput_V_fu_520_p3;
                icmp_reg_673 <= icmp_fu_365_p2;
                icmp_reg_673_pp0_iter1_reg <= icmp_reg_673;
                linearizerOutput_V_1_reg_625 <= linearizerOutput_V_1_fu_242_p3;
                mul_V_reg_642 <= r_V_6_fu_611_p2(24 downto 6);
                r_0_peak_reg_V_read_1_reg_619 <= r_0_peak_reg_V_read;
                r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg <= r_0_peak_reg_V_read_1_reg_619;
                r_0_shift_reg_V_rea_reg_631 <= r_0_shift_reg_V_i;
                tmp_15_reg_653 <= r_V_6_fu_611_p2(23 downto 6);
                tmp_17_reg_658 <= r_V_4_fu_285_p2(23 downto 6);
                tmp_18_1_reg_647 <= r_1_shift_reg_V_i(17 downto 2);
                tmp_2_reg_663 <= tmp_2_fu_343_p2;
                tmp_4_reg_668 <= tmp_4_fu_349_p2;
                tmp_4_reg_668_pp0_iter1_reg <= tmp_4_reg_668;
                tmp_578_reg_637 <= r_V_4_fu_285_p2(24 downto 6);
                tmp_6_reg_678 <= r_0_peak_reg_V_read(17 downto 2);
                tmp_6_reg_678_pp0_iter1_reg <= tmp_6_reg_678;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    addconv_3_cast_fu_501_p2 <= std_logic_vector(unsigned(tmp_19_fu_484_p2) + unsigned(tmp_20_fu_490_p2));
    addconv_3_fu_495_p2 <= std_logic_vector(unsigned(tmp4_fu_479_p2) + unsigned(tmp3_fu_463_p2));
    agg_result_V_1_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(agg_result_V_1_fu_575_p3),16));
    agg_result_V_1_fu_575_p3 <= 
        p_phitmp3_fu_567_p3 when (or_cond1_fu_536_p2(0) = '1') else 
        ap_const_lv10_0;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= agg_result_V_1_cast_fu_583_p1;
    ap_return_1 <= filterOutput_V_cast_fu_528_p1;
    ap_return_2 <= r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg;
    base_V_fu_189_p1 <= lincoeff_V(12 - 1 downto 0);
    filterOutput_V_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filterOutput_V_reg_683),19));
    filterOutput_V_fu_520_p3 <= 
        ap_const_lv18_0 when (or_cond_fu_515_p2(0) = '1') else 
        addconv_3_cast_fu_501_p2;
    icmp1_fu_561_p2 <= "0" when (tmp_21_fu_551_p4 = ap_const_lv6_0) else "1";
    icmp_fu_365_p2 <= "1" when (signed(tmp_9_fu_355_p4) > signed(ap_const_lv7_0)) else "0";
    lhs_V_3_2_cast7_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_shift_reg_V_rea_reg_631),24));
    lhs_V_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(uncorrectedADC_V_fu_185_p1),13));
    linearizerOutput_V_1_fu_242_p3 <= 
        ap_const_lv18_0 when (tmp_7_fu_234_p3(0) = '1') else 
        linearizerOutput_V_fu_225_p4;
    linearizerOutput_V_fu_225_p4 <= r_V_fu_604_p2(19 downto 2);
    mult_fu_193_p4 <= lincoeff_V(23 downto 16);
    or_cond1_fu_536_p2 <= (tmp_4_reg_668_pp0_iter1_reg and tmp_3_fu_531_p2);
    or_cond_fu_515_p2 <= (tmp_8_fu_507_p3 or tmp_2_reg_663);
        p_neg_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_neg_fu_263_p2),25));

    p_neg_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(p_shl_cast_fu_259_p1));
    p_phitmp3_fu_567_p3 <= 
        ap_const_lv10_3FF when (icmp1_fu_561_p2(0) = '1') else 
        tmp_18_fu_547_p1;
    p_shl1_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_273_p3),25));
    p_shl1_fu_273_p3 <= (r_3_shift_reg_V_i & ap_const_lv2_0);
    p_shl2_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_390_p3),24));
    p_shl2_fu_390_p3 <= (r_0_shift_reg_V_rea_reg_631 & ap_const_lv5_0);
    p_shl3_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_421_p3),24));
    p_shl3_fu_421_p3 <= (linearizerOutput_V_1_reg_625 & ap_const_lv5_0);
    p_shl4_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_432_p3),24));
    p_shl4_fu_432_p3 <= (linearizerOutput_V_1_reg_625 & ap_const_lv3_0);
    p_shl_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_251_p3),24));
    p_shl_fu_251_p3 <= (r_3_shift_reg_V_i & ap_const_lv5_0);
    r_0_shift_reg_V_o <= 
        ap_const_lv18_0 when (tmp_7_fu_234_p3(0) = '1') else 
        linearizerOutput_V_fu_225_p4;

    r_0_shift_reg_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            r_0_shift_reg_V_o_ap_vld <= ap_const_logic_1;
        else 
            r_0_shift_reg_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_1_shift_reg_V_o <= r_0_shift_reg_V_i;

    r_1_shift_reg_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            r_1_shift_reg_V_o_ap_vld <= ap_const_logic_1;
        else 
            r_1_shift_reg_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_2_shift_reg_V_o <= r_1_shift_reg_V_i;

    r_2_shift_reg_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            r_2_shift_reg_V_o_ap_vld <= ap_const_logic_1;
        else 
            r_2_shift_reg_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_3_shift_reg_V_o <= r_2_shift_reg_V_i;

    r_3_shift_reg_V_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            r_3_shift_reg_V_o_ap_vld <= ap_const_logic_1;
        else 
            r_3_shift_reg_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_V_3_fu_211_p2 <= std_logic_vector(unsigned(lhs_V_fu_203_p1) - unsigned(rhs_V_fu_207_p1));
    r_V_4_fu_285_p2 <= std_logic_vector(signed(p_neg_cast_fu_269_p1) - signed(p_shl1_cast_fu_281_p1));
    r_V_6_2_fu_401_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_397_p1) - unsigned(lhs_V_3_2_cast7_fu_387_p1));
    r_V_6_3_fu_443_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_428_p1) - unsigned(p_shl4_cast_fu_439_p1));
    r_V_6_fu_611_p0 <= ap_const_lv25_1FFFFDD(7 - 1 downto 0);
    r_V_6_fu_611_p1 <= r_V_6_fu_611_p10(18 - 1 downto 0);
    r_V_6_fu_611_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_2_shift_reg_V_i),25));
    r_V_fu_604_p1 <= r_V_fu_604_p10(8 - 1 downto 0);
    r_V_fu_604_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mult_fu_193_p4),21));
    rhs_V_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(base_V_fu_189_p1),13));
    tmp3_fu_463_p2 <= std_logic_vector(unsigned(tmp_18_1_cast_fu_384_p1) + unsigned(tmp_11_fu_417_p1));
    tmp4_fu_479_p2 <= std_logic_vector(unsigned(tmp5_fu_469_p2) + unsigned(tmp_578_reg_637));
    tmp5_fu_469_p2 <= std_logic_vector(unsigned(mul_V_reg_642) + unsigned(tmp_14_fu_459_p1));
    tmpPeak_V_fu_541_p3 <= 
        ap_const_lv16_3FF when (icmp_reg_673_pp0_iter1_reg(0) = '1') else 
        tmp_6_reg_678_pp0_iter1_reg;
    tmp_10_fu_407_p4 <= r_V_6_2_fu_401_p2(23 downto 6);
        tmp_11_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_407_p4),19));

    tmp_13_fu_449_p4 <= r_V_6_3_fu_443_p2(23 downto 6);
        tmp_14_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_449_p4),19));

    tmp_16_fu_474_p2 <= std_logic_vector(signed(tmp_13_fu_449_p4) + signed(tmp_15_reg_653));
    tmp_18_1_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_1_reg_647),19));
    tmp_18_fu_547_p1 <= tmpPeak_V_fu_541_p3(10 - 1 downto 0);
    tmp_19_fu_484_p2 <= std_logic_vector(signed(tmp_10_fu_407_p4) + signed(tmp_fu_381_p1));
    tmp_20_fu_490_p2 <= std_logic_vector(unsigned(tmp_17_reg_658) + unsigned(tmp_16_fu_474_p2));
    tmp_21_fu_551_p4 <= tmpPeak_V_fu_541_p3(15 downto 10);
    tmp_2_fu_343_p2 <= "1" when (r_3_shift_reg_V_i = ap_const_lv18_0) else "0";
    tmp_3_fu_531_p2 <= "1" when (signed(filterOutput_V_cast_fu_528_p1) < signed(r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg)) else "0";
    tmp_4_fu_349_p2 <= "1" when (signed(r_0_peak_reg_V_read) > signed(r_1_peak_reg_V_read)) else "0";
    tmp_7_fu_234_p3 <= r_V_3_fu_211_p2(12 downto 12);
    tmp_8_fu_507_p3 <= addconv_3_fu_495_p2(18 downto 18);
    tmp_9_fu_355_p4 <= r_0_peak_reg_V_read(18 downto 12);
    tmp_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_1_reg_647),18));
    uncorrectedADC_V_fu_185_p1 <= data_int_V(12 - 1 downto 0);
end behav;
