-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity algo_unpacked_coedEe_rom is 
    generic(
             dwidth     : integer := 24; 
             awidth     : integer := 10; 
             mem_size    : integer := 570
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          addr2      : in std_logic_vector(awidth-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(dwidth-1 downto 0);
          addr3      : in std_logic_vector(awidth-1 downto 0); 
          ce3       : in std_logic; 
          q3         : out std_logic_vector(dwidth-1 downto 0);
          addr4      : in std_logic_vector(awidth-1 downto 0); 
          ce4       : in std_logic; 
          q4         : out std_logic_vector(dwidth-1 downto 0);
          addr5      : in std_logic_vector(awidth-1 downto 0); 
          ce5       : in std_logic; 
          q5         : out std_logic_vector(dwidth-1 downto 0);
          addr6      : in std_logic_vector(awidth-1 downto 0); 
          ce6       : in std_logic; 
          q6         : out std_logic_vector(dwidth-1 downto 0);
          addr7      : in std_logic_vector(awidth-1 downto 0); 
          ce7       : in std_logic; 
          q7         : out std_logic_vector(dwidth-1 downto 0);
          addr8      : in std_logic_vector(awidth-1 downto 0); 
          ce8       : in std_logic; 
          q8         : out std_logic_vector(dwidth-1 downto 0);
          addr9      : in std_logic_vector(awidth-1 downto 0); 
          ce9       : in std_logic; 
          q9         : out std_logic_vector(dwidth-1 downto 0);
          addr10      : in std_logic_vector(awidth-1 downto 0); 
          ce10       : in std_logic; 
          q10         : out std_logic_vector(dwidth-1 downto 0);
          addr11      : in std_logic_vector(awidth-1 downto 0); 
          ce11       : in std_logic; 
          q11         : out std_logic_vector(dwidth-1 downto 0);
          addr12      : in std_logic_vector(awidth-1 downto 0); 
          ce12       : in std_logic; 
          q12         : out std_logic_vector(dwidth-1 downto 0);
          addr13      : in std_logic_vector(awidth-1 downto 0); 
          ce13       : in std_logic; 
          q13         : out std_logic_vector(dwidth-1 downto 0);
          addr14      : in std_logic_vector(awidth-1 downto 0); 
          ce14       : in std_logic; 
          q14         : out std_logic_vector(dwidth-1 downto 0);
          addr15      : in std_logic_vector(awidth-1 downto 0); 
          ce15       : in std_logic; 
          q15         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of algo_unpacked_coedEe_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr2_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr3_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr4_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr5_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr6_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr7_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr8_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr9_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr10_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr11_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr12_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr13_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr14_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr15_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem0 : mem_array := (
    0 to 3=> "101101110101000001101010", 4 to 9=> "100010010001000011000000", 
    10 to 13=> "101011010101000001110100", 14 to 19=> "100000010001000011000000", 
    20 to 23=> "101110100101000001101110", 24 to 29=> "100011000001000011000000", 
    30 to 33=> "110111100110000001100101", 34 to 39=> "101001100010000010111111", 
    40 to 43=> "111101010110000001110001", 44 => "111101010101000010011100", 
    45 to 49=> "101110000010000011000000", 50 to 53=> "101000010101000001101000", 
    54 to 59=> "111100100010000011000000", 60 to 63=> "110100000101000001110000", 
    64 to 69=> "100111000001000011000000", 70 to 73=> "111010000101000001110101", 
    74 => "111010000100000010011110", 75 to 79=> "101011100001000011000001", 
    80 to 83=> "110000010101000001100101", 84 to 89=> "100100000001000010111111", 
    90 to 93=> "101110100101000001100001", 94 => "101110100100000010010100", 
    95 to 99=> "100010110001000010111111", 100 to 103=> "111100100101000001111001", 
    104 to 109=> "101101100001000011000001", 110 to 113=> "101101010101000001101111", 
    114 to 119=> "100010000001000011000000", 120 to 123=> "110100100110000001101111", 
    124 to 129=> "100111010010000011000000", 130 to 133=> "101101110101000001101111", 
    134 to 139=> "100010010001000011000000", 140 to 143=> "100100100101000001101100", 
    144 to 149=> "110110110010000011000000", 150 to 153=> "110111110110000001110110", 
    154 to 159=> "101001110010000011000001", 160 to 163=> "111001010110000001101110", 
    164 to 169=> "101010110010000011000000", 170 to 173=> "100111010101000001110110", 
    174 to 179=> "111010110010000011000001", 180 to 183=> "111111100110000001100001", 
    184 to 189=> "101111110010000010111111", 190 to 193=> "100110100110000001010100", 
    194 to 199=> "111001110011000010111110", 200 to 203=> "110000100110000001100110", 
    204 to 209=> "100100100010000010111111", 210 to 213=> "110000000110000001100100", 
    214 to 219=> "100100000010000010111111", 220 to 223=> "101101000101000001100110", 
    224 to 229=> "100001110001000010111111", 230 to 233=> "101100010101000001101011", 
    234 to 239=> "100001000001000011000000", 240 to 243=> "100011000101000001110111", 
    244 to 249=> "110100100010000011000001", 250 to 253=> "100111010101000001110000", 
    254 to 259=> "111010110010000011000000", 260 to 263=> "110010110110000001011001", 
    264 to 269=> "100110000010000010111110", 270 to 273=> "110000110110000001100111", 
    274 to 279=> "100100110010000010111111", 280 to 283=> "101011100101000001100110", 
    284 to 289=> "100000110001000010111111", 290 to 293=> "110011110101000001101111", 
    294 to 299=> "100111000001000011000000", 300 to 303=> "101011010101000001100010", 
    304 to 309=> "100000100001000010111111", 310 to 313=> "100000110101000001101001", 
    314 to 319=> "110001000010000011000000", 320 to 323=> "100001100101000001001110", 
    324 to 329=> "110010010010000010111101", 330 to 333=> "100001010101000001100111", 
    334 to 339=> "110010000010000010111111", 340 to 343=> "110111110110000001101011", 
    344 to 349=> "101001110010000011000000", 350 to 353=> "110100000110000001110000", 
    354 to 359=> "100111000010000011000000", 360 to 363=> "101011010101000001011110", 
    364 to 369=> "100000100001000010111111", 370 to 373=> "101011000101000001110010", 
    374 to 379=> "100000010001000011000000", 380 to 383=> "110001010101000001101101", 
    384 to 389=> "100101000001000011000000", 390 to 393=> "101111100101000001100011", 
    394 to 399=> "100011110001000010111111", 400 to 403=> "111010010110000001111101", 
    404 to 409=> "101011110010000011000001", 410 to 413=> "100001010101000001110001", 
    414 to 419=> "110010000010000011000000", 420 to 423=> "100111100101000001110111", 
    424 to 429=> "111011010010000011000001", 430 to 433=> "101111110101000001100101", 
    434 to 439=> "100011110001000010111111", 440 to 443=> "111010000110000001111010", 
    444 to 449=> "101011100010000011000001", 450 to 453=> "110101110101000001110001", 
    454 to 459=> "101000010001000011000000", 460 to 463=> "100010110101000001101101", 
    464 to 469=> "110100000010000011000000", 470 to 473=> "111000000110000001110010", 
    474 to 479=> "101010000010000011000000", 480 to 483=> "100101010101000001101110", 
    484 to 489=> "111000000010000011000000", 490 to 493=> "111011010110000001101111", 
    494 to 499=> "101100100010000011000000", 500 to 503=> "101111000110000001100110", 
    504 to 509=> "100011010010000010111111", 510 to 513=> "110100000110000001100111", 
    514 to 519=> "100111000010000010111111", 520 to 523=> "110001110101000001101001", 
    524 => "110001110100000010011000", 525 to 529=> "100101010001000011000000", 
    530 to 533=> "111111000110000001110010", 534 to 539=> "101111010010000011000000", 
    540 to 543=> "110011010101000001110011", 544 to 549=> "100110100001000011000000", 
    550 to 553=> "111101000110000001110110", 554 to 559=> "101101110010000011000001", 
    560 to 563=> "110011100110000001101001", 564 to 569=> "100110110010000011000000" );
signal mem1 : mem_array := (
    0 to 3=> "101101110101000001101010", 4 to 9=> "100010010001000011000000", 
    10 to 13=> "101011010101000001110100", 14 to 19=> "100000010001000011000000", 
    20 to 23=> "101110100101000001101110", 24 to 29=> "100011000001000011000000", 
    30 to 33=> "110111100110000001100101", 34 to 39=> "101001100010000010111111", 
    40 to 43=> "111101010110000001110001", 44 => "111101010101000010011100", 
    45 to 49=> "101110000010000011000000", 50 to 53=> "101000010101000001101000", 
    54 to 59=> "111100100010000011000000", 60 to 63=> "110100000101000001110000", 
    64 to 69=> "100111000001000011000000", 70 to 73=> "111010000101000001110101", 
    74 => "111010000100000010011110", 75 to 79=> "101011100001000011000001", 
    80 to 83=> "110000010101000001100101", 84 to 89=> "100100000001000010111111", 
    90 to 93=> "101110100101000001100001", 94 => "101110100100000010010100", 
    95 to 99=> "100010110001000010111111", 100 to 103=> "111100100101000001111001", 
    104 to 109=> "101101100001000011000001", 110 to 113=> "101101010101000001101111", 
    114 to 119=> "100010000001000011000000", 120 to 123=> "110100100110000001101111", 
    124 to 129=> "100111010010000011000000", 130 to 133=> "101101110101000001101111", 
    134 to 139=> "100010010001000011000000", 140 to 143=> "100100100101000001101100", 
    144 to 149=> "110110110010000011000000", 150 to 153=> "110111110110000001110110", 
    154 to 159=> "101001110010000011000001", 160 to 163=> "111001010110000001101110", 
    164 to 169=> "101010110010000011000000", 170 to 173=> "100111010101000001110110", 
    174 to 179=> "111010110010000011000001", 180 to 183=> "111111100110000001100001", 
    184 to 189=> "101111110010000010111111", 190 to 193=> "100110100110000001010100", 
    194 to 199=> "111001110011000010111110", 200 to 203=> "110000100110000001100110", 
    204 to 209=> "100100100010000010111111", 210 to 213=> "110000000110000001100100", 
    214 to 219=> "100100000010000010111111", 220 to 223=> "101101000101000001100110", 
    224 to 229=> "100001110001000010111111", 230 to 233=> "101100010101000001101011", 
    234 to 239=> "100001000001000011000000", 240 to 243=> "100011000101000001110111", 
    244 to 249=> "110100100010000011000001", 250 to 253=> "100111010101000001110000", 
    254 to 259=> "111010110010000011000000", 260 to 263=> "110010110110000001011001", 
    264 to 269=> "100110000010000010111110", 270 to 273=> "110000110110000001100111", 
    274 to 279=> "100100110010000010111111", 280 to 283=> "101011100101000001100110", 
    284 to 289=> "100000110001000010111111", 290 to 293=> "110011110101000001101111", 
    294 to 299=> "100111000001000011000000", 300 to 303=> "101011010101000001100010", 
    304 to 309=> "100000100001000010111111", 310 to 313=> "100000110101000001101001", 
    314 to 319=> "110001000010000011000000", 320 to 323=> "100001100101000001001110", 
    324 to 329=> "110010010010000010111101", 330 to 333=> "100001010101000001100111", 
    334 to 339=> "110010000010000010111111", 340 to 343=> "110111110110000001101011", 
    344 to 349=> "101001110010000011000000", 350 to 353=> "110100000110000001110000", 
    354 to 359=> "100111000010000011000000", 360 to 363=> "101011010101000001011110", 
    364 to 369=> "100000100001000010111111", 370 to 373=> "101011000101000001110010", 
    374 to 379=> "100000010001000011000000", 380 to 383=> "110001010101000001101101", 
    384 to 389=> "100101000001000011000000", 390 to 393=> "101111100101000001100011", 
    394 to 399=> "100011110001000010111111", 400 to 403=> "111010010110000001111101", 
    404 to 409=> "101011110010000011000001", 410 to 413=> "100001010101000001110001", 
    414 to 419=> "110010000010000011000000", 420 to 423=> "100111100101000001110111", 
    424 to 429=> "111011010010000011000001", 430 to 433=> "101111110101000001100101", 
    434 to 439=> "100011110001000010111111", 440 to 443=> "111010000110000001111010", 
    444 to 449=> "101011100010000011000001", 450 to 453=> "110101110101000001110001", 
    454 to 459=> "101000010001000011000000", 460 to 463=> "100010110101000001101101", 
    464 to 469=> "110100000010000011000000", 470 to 473=> "111000000110000001110010", 
    474 to 479=> "101010000010000011000000", 480 to 483=> "100101010101000001101110", 
    484 to 489=> "111000000010000011000000", 490 to 493=> "111011010110000001101111", 
    494 to 499=> "101100100010000011000000", 500 to 503=> "101111000110000001100110", 
    504 to 509=> "100011010010000010111111", 510 to 513=> "110100000110000001100111", 
    514 to 519=> "100111000010000010111111", 520 to 523=> "110001110101000001101001", 
    524 => "110001110100000010011000", 525 to 529=> "100101010001000011000000", 
    530 to 533=> "111111000110000001110010", 534 to 539=> "101111010010000011000000", 
    540 to 543=> "110011010101000001110011", 544 to 549=> "100110100001000011000000", 
    550 to 553=> "111101000110000001110110", 554 to 559=> "101101110010000011000001", 
    560 to 563=> "110011100110000001101001", 564 to 569=> "100110110010000011000000" );
signal mem2 : mem_array := (
    0 to 3=> "101101110101000001101010", 4 to 9=> "100010010001000011000000", 
    10 to 13=> "101011010101000001110100", 14 to 19=> "100000010001000011000000", 
    20 to 23=> "101110100101000001101110", 24 to 29=> "100011000001000011000000", 
    30 to 33=> "110111100110000001100101", 34 to 39=> "101001100010000010111111", 
    40 to 43=> "111101010110000001110001", 44 => "111101010101000010011100", 
    45 to 49=> "101110000010000011000000", 50 to 53=> "101000010101000001101000", 
    54 to 59=> "111100100010000011000000", 60 to 63=> "110100000101000001110000", 
    64 to 69=> "100111000001000011000000", 70 to 73=> "111010000101000001110101", 
    74 => "111010000100000010011110", 75 to 79=> "101011100001000011000001", 
    80 to 83=> "110000010101000001100101", 84 to 89=> "100100000001000010111111", 
    90 to 93=> "101110100101000001100001", 94 => "101110100100000010010100", 
    95 to 99=> "100010110001000010111111", 100 to 103=> "111100100101000001111001", 
    104 to 109=> "101101100001000011000001", 110 to 113=> "101101010101000001101111", 
    114 to 119=> "100010000001000011000000", 120 to 123=> "110100100110000001101111", 
    124 to 129=> "100111010010000011000000", 130 to 133=> "101101110101000001101111", 
    134 to 139=> "100010010001000011000000", 140 to 143=> "100100100101000001101100", 
    144 to 149=> "110110110010000011000000", 150 to 153=> "110111110110000001110110", 
    154 to 159=> "101001110010000011000001", 160 to 163=> "111001010110000001101110", 
    164 to 169=> "101010110010000011000000", 170 to 173=> "100111010101000001110110", 
    174 to 179=> "111010110010000011000001", 180 to 183=> "111111100110000001100001", 
    184 to 189=> "101111110010000010111111", 190 to 193=> "100110100110000001010100", 
    194 to 199=> "111001110011000010111110", 200 to 203=> "110000100110000001100110", 
    204 to 209=> "100100100010000010111111", 210 to 213=> "110000000110000001100100", 
    214 to 219=> "100100000010000010111111", 220 to 223=> "101101000101000001100110", 
    224 to 229=> "100001110001000010111111", 230 to 233=> "101100010101000001101011", 
    234 to 239=> "100001000001000011000000", 240 to 243=> "100011000101000001110111", 
    244 to 249=> "110100100010000011000001", 250 to 253=> "100111010101000001110000", 
    254 to 259=> "111010110010000011000000", 260 to 263=> "110010110110000001011001", 
    264 to 269=> "100110000010000010111110", 270 to 273=> "110000110110000001100111", 
    274 to 279=> "100100110010000010111111", 280 to 283=> "101011100101000001100110", 
    284 to 289=> "100000110001000010111111", 290 to 293=> "110011110101000001101111", 
    294 to 299=> "100111000001000011000000", 300 to 303=> "101011010101000001100010", 
    304 to 309=> "100000100001000010111111", 310 to 313=> "100000110101000001101001", 
    314 to 319=> "110001000010000011000000", 320 to 323=> "100001100101000001001110", 
    324 to 329=> "110010010010000010111101", 330 to 333=> "100001010101000001100111", 
    334 to 339=> "110010000010000010111111", 340 to 343=> "110111110110000001101011", 
    344 to 349=> "101001110010000011000000", 350 to 353=> "110100000110000001110000", 
    354 to 359=> "100111000010000011000000", 360 to 363=> "101011010101000001011110", 
    364 to 369=> "100000100001000010111111", 370 to 373=> "101011000101000001110010", 
    374 to 379=> "100000010001000011000000", 380 to 383=> "110001010101000001101101", 
    384 to 389=> "100101000001000011000000", 390 to 393=> "101111100101000001100011", 
    394 to 399=> "100011110001000010111111", 400 to 403=> "111010010110000001111101", 
    404 to 409=> "101011110010000011000001", 410 to 413=> "100001010101000001110001", 
    414 to 419=> "110010000010000011000000", 420 to 423=> "100111100101000001110111", 
    424 to 429=> "111011010010000011000001", 430 to 433=> "101111110101000001100101", 
    434 to 439=> "100011110001000010111111", 440 to 443=> "111010000110000001111010", 
    444 to 449=> "101011100010000011000001", 450 to 453=> "110101110101000001110001", 
    454 to 459=> "101000010001000011000000", 460 to 463=> "100010110101000001101101", 
    464 to 469=> "110100000010000011000000", 470 to 473=> "111000000110000001110010", 
    474 to 479=> "101010000010000011000000", 480 to 483=> "100101010101000001101110", 
    484 to 489=> "111000000010000011000000", 490 to 493=> "111011010110000001101111", 
    494 to 499=> "101100100010000011000000", 500 to 503=> "101111000110000001100110", 
    504 to 509=> "100011010010000010111111", 510 to 513=> "110100000110000001100111", 
    514 to 519=> "100111000010000010111111", 520 to 523=> "110001110101000001101001", 
    524 => "110001110100000010011000", 525 to 529=> "100101010001000011000000", 
    530 to 533=> "111111000110000001110010", 534 to 539=> "101111010010000011000000", 
    540 to 543=> "110011010101000001110011", 544 to 549=> "100110100001000011000000", 
    550 to 553=> "111101000110000001110110", 554 to 559=> "101101110010000011000001", 
    560 to 563=> "110011100110000001101001", 564 to 569=> "100110110010000011000000" );
signal mem3 : mem_array := (
    0 to 3=> "101101110101000001101010", 4 to 9=> "100010010001000011000000", 
    10 to 13=> "101011010101000001110100", 14 to 19=> "100000010001000011000000", 
    20 to 23=> "101110100101000001101110", 24 to 29=> "100011000001000011000000", 
    30 to 33=> "110111100110000001100101", 34 to 39=> "101001100010000010111111", 
    40 to 43=> "111101010110000001110001", 44 => "111101010101000010011100", 
    45 to 49=> "101110000010000011000000", 50 to 53=> "101000010101000001101000", 
    54 to 59=> "111100100010000011000000", 60 to 63=> "110100000101000001110000", 
    64 to 69=> "100111000001000011000000", 70 to 73=> "111010000101000001110101", 
    74 => "111010000100000010011110", 75 to 79=> "101011100001000011000001", 
    80 to 83=> "110000010101000001100101", 84 to 89=> "100100000001000010111111", 
    90 to 93=> "101110100101000001100001", 94 => "101110100100000010010100", 
    95 to 99=> "100010110001000010111111", 100 to 103=> "111100100101000001111001", 
    104 to 109=> "101101100001000011000001", 110 to 113=> "101101010101000001101111", 
    114 to 119=> "100010000001000011000000", 120 to 123=> "110100100110000001101111", 
    124 to 129=> "100111010010000011000000", 130 to 133=> "101101110101000001101111", 
    134 to 139=> "100010010001000011000000", 140 to 143=> "100100100101000001101100", 
    144 to 149=> "110110110010000011000000", 150 to 153=> "110111110110000001110110", 
    154 to 159=> "101001110010000011000001", 160 to 163=> "111001010110000001101110", 
    164 to 169=> "101010110010000011000000", 170 to 173=> "100111010101000001110110", 
    174 to 179=> "111010110010000011000001", 180 to 183=> "111111100110000001100001", 
    184 to 189=> "101111110010000010111111", 190 to 193=> "100110100110000001010100", 
    194 to 199=> "111001110011000010111110", 200 to 203=> "110000100110000001100110", 
    204 to 209=> "100100100010000010111111", 210 to 213=> "110000000110000001100100", 
    214 to 219=> "100100000010000010111111", 220 to 223=> "101101000101000001100110", 
    224 to 229=> "100001110001000010111111", 230 to 233=> "101100010101000001101011", 
    234 to 239=> "100001000001000011000000", 240 to 243=> "100011000101000001110111", 
    244 to 249=> "110100100010000011000001", 250 to 253=> "100111010101000001110000", 
    254 to 259=> "111010110010000011000000", 260 to 263=> "110010110110000001011001", 
    264 to 269=> "100110000010000010111110", 270 to 273=> "110000110110000001100111", 
    274 to 279=> "100100110010000010111111", 280 to 283=> "101011100101000001100110", 
    284 to 289=> "100000110001000010111111", 290 to 293=> "110011110101000001101111", 
    294 to 299=> "100111000001000011000000", 300 to 303=> "101011010101000001100010", 
    304 to 309=> "100000100001000010111111", 310 to 313=> "100000110101000001101001", 
    314 to 319=> "110001000010000011000000", 320 to 323=> "100001100101000001001110", 
    324 to 329=> "110010010010000010111101", 330 to 333=> "100001010101000001100111", 
    334 to 339=> "110010000010000010111111", 340 to 343=> "110111110110000001101011", 
    344 to 349=> "101001110010000011000000", 350 to 353=> "110100000110000001110000", 
    354 to 359=> "100111000010000011000000", 360 to 363=> "101011010101000001011110", 
    364 to 369=> "100000100001000010111111", 370 to 373=> "101011000101000001110010", 
    374 to 379=> "100000010001000011000000", 380 to 383=> "110001010101000001101101", 
    384 to 389=> "100101000001000011000000", 390 to 393=> "101111100101000001100011", 
    394 to 399=> "100011110001000010111111", 400 to 403=> "111010010110000001111101", 
    404 to 409=> "101011110010000011000001", 410 to 413=> "100001010101000001110001", 
    414 to 419=> "110010000010000011000000", 420 to 423=> "100111100101000001110111", 
    424 to 429=> "111011010010000011000001", 430 to 433=> "101111110101000001100101", 
    434 to 439=> "100011110001000010111111", 440 to 443=> "111010000110000001111010", 
    444 to 449=> "101011100010000011000001", 450 to 453=> "110101110101000001110001", 
    454 to 459=> "101000010001000011000000", 460 to 463=> "100010110101000001101101", 
    464 to 469=> "110100000010000011000000", 470 to 473=> "111000000110000001110010", 
    474 to 479=> "101010000010000011000000", 480 to 483=> "100101010101000001101110", 
    484 to 489=> "111000000010000011000000", 490 to 493=> "111011010110000001101111", 
    494 to 499=> "101100100010000011000000", 500 to 503=> "101111000110000001100110", 
    504 to 509=> "100011010010000010111111", 510 to 513=> "110100000110000001100111", 
    514 to 519=> "100111000010000010111111", 520 to 523=> "110001110101000001101001", 
    524 => "110001110100000010011000", 525 to 529=> "100101010001000011000000", 
    530 to 533=> "111111000110000001110010", 534 to 539=> "101111010010000011000000", 
    540 to 543=> "110011010101000001110011", 544 to 549=> "100110100001000011000000", 
    550 to 553=> "111101000110000001110110", 554 to 559=> "101101110010000011000001", 
    560 to 563=> "110011100110000001101001", 564 to 569=> "100110110010000011000000" );
signal mem4 : mem_array := (
    0 to 3=> "101101110101000001101010", 4 to 9=> "100010010001000011000000", 
    10 to 13=> "101011010101000001110100", 14 to 19=> "100000010001000011000000", 
    20 to 23=> "101110100101000001101110", 24 to 29=> "100011000001000011000000", 
    30 to 33=> "110111100110000001100101", 34 to 39=> "101001100010000010111111", 
    40 to 43=> "111101010110000001110001", 44 => "111101010101000010011100", 
    45 to 49=> "101110000010000011000000", 50 to 53=> "101000010101000001101000", 
    54 to 59=> "111100100010000011000000", 60 to 63=> "110100000101000001110000", 
    64 to 69=> "100111000001000011000000", 70 to 73=> "111010000101000001110101", 
    74 => "111010000100000010011110", 75 to 79=> "101011100001000011000001", 
    80 to 83=> "110000010101000001100101", 84 to 89=> "100100000001000010111111", 
    90 to 93=> "101110100101000001100001", 94 => "101110100100000010010100", 
    95 to 99=> "100010110001000010111111", 100 to 103=> "111100100101000001111001", 
    104 to 109=> "101101100001000011000001", 110 to 113=> "101101010101000001101111", 
    114 to 119=> "100010000001000011000000", 120 to 123=> "110100100110000001101111", 
    124 to 129=> "100111010010000011000000", 130 to 133=> "101101110101000001101111", 
    134 to 139=> "100010010001000011000000", 140 to 143=> "100100100101000001101100", 
    144 to 149=> "110110110010000011000000", 150 to 153=> "110111110110000001110110", 
    154 to 159=> "101001110010000011000001", 160 to 163=> "111001010110000001101110", 
    164 to 169=> "101010110010000011000000", 170 to 173=> "100111010101000001110110", 
    174 to 179=> "111010110010000011000001", 180 to 183=> "111111100110000001100001", 
    184 to 189=> "101111110010000010111111", 190 to 193=> "100110100110000001010100", 
    194 to 199=> "111001110011000010111110", 200 to 203=> "110000100110000001100110", 
    204 to 209=> "100100100010000010111111", 210 to 213=> "110000000110000001100100", 
    214 to 219=> "100100000010000010111111", 220 to 223=> "101101000101000001100110", 
    224 to 229=> "100001110001000010111111", 230 to 233=> "101100010101000001101011", 
    234 to 239=> "100001000001000011000000", 240 to 243=> "100011000101000001110111", 
    244 to 249=> "110100100010000011000001", 250 to 253=> "100111010101000001110000", 
    254 to 259=> "111010110010000011000000", 260 to 263=> "110010110110000001011001", 
    264 to 269=> "100110000010000010111110", 270 to 273=> "110000110110000001100111", 
    274 to 279=> "100100110010000010111111", 280 to 283=> "101011100101000001100110", 
    284 to 289=> "100000110001000010111111", 290 to 293=> "110011110101000001101111", 
    294 to 299=> "100111000001000011000000", 300 to 303=> "101011010101000001100010", 
    304 to 309=> "100000100001000010111111", 310 to 313=> "100000110101000001101001", 
    314 to 319=> "110001000010000011000000", 320 to 323=> "100001100101000001001110", 
    324 to 329=> "110010010010000010111101", 330 to 333=> "100001010101000001100111", 
    334 to 339=> "110010000010000010111111", 340 to 343=> "110111110110000001101011", 
    344 to 349=> "101001110010000011000000", 350 to 353=> "110100000110000001110000", 
    354 to 359=> "100111000010000011000000", 360 to 363=> "101011010101000001011110", 
    364 to 369=> "100000100001000010111111", 370 to 373=> "101011000101000001110010", 
    374 to 379=> "100000010001000011000000", 380 to 383=> "110001010101000001101101", 
    384 to 389=> "100101000001000011000000", 390 to 393=> "101111100101000001100011", 
    394 to 399=> "100011110001000010111111", 400 to 403=> "111010010110000001111101", 
    404 to 409=> "101011110010000011000001", 410 to 413=> "100001010101000001110001", 
    414 to 419=> "110010000010000011000000", 420 to 423=> "100111100101000001110111", 
    424 to 429=> "111011010010000011000001", 430 to 433=> "101111110101000001100101", 
    434 to 439=> "100011110001000010111111", 440 to 443=> "111010000110000001111010", 
    444 to 449=> "101011100010000011000001", 450 to 453=> "110101110101000001110001", 
    454 to 459=> "101000010001000011000000", 460 to 463=> "100010110101000001101101", 
    464 to 469=> "110100000010000011000000", 470 to 473=> "111000000110000001110010", 
    474 to 479=> "101010000010000011000000", 480 to 483=> "100101010101000001101110", 
    484 to 489=> "111000000010000011000000", 490 to 493=> "111011010110000001101111", 
    494 to 499=> "101100100010000011000000", 500 to 503=> "101111000110000001100110", 
    504 to 509=> "100011010010000010111111", 510 to 513=> "110100000110000001100111", 
    514 to 519=> "100111000010000010111111", 520 to 523=> "110001110101000001101001", 
    524 => "110001110100000010011000", 525 to 529=> "100101010001000011000000", 
    530 to 533=> "111111000110000001110010", 534 to 539=> "101111010010000011000000", 
    540 to 543=> "110011010101000001110011", 544 to 549=> "100110100001000011000000", 
    550 to 553=> "111101000110000001110110", 554 to 559=> "101101110010000011000001", 
    560 to 563=> "110011100110000001101001", 564 to 569=> "100110110010000011000000" );
signal mem5 : mem_array := (
    0 to 3=> "101101110101000001101010", 4 to 9=> "100010010001000011000000", 
    10 to 13=> "101011010101000001110100", 14 to 19=> "100000010001000011000000", 
    20 to 23=> "101110100101000001101110", 24 to 29=> "100011000001000011000000", 
    30 to 33=> "110111100110000001100101", 34 to 39=> "101001100010000010111111", 
    40 to 43=> "111101010110000001110001", 44 => "111101010101000010011100", 
    45 to 49=> "101110000010000011000000", 50 to 53=> "101000010101000001101000", 
    54 to 59=> "111100100010000011000000", 60 to 63=> "110100000101000001110000", 
    64 to 69=> "100111000001000011000000", 70 to 73=> "111010000101000001110101", 
    74 => "111010000100000010011110", 75 to 79=> "101011100001000011000001", 
    80 to 83=> "110000010101000001100101", 84 to 89=> "100100000001000010111111", 
    90 to 93=> "101110100101000001100001", 94 => "101110100100000010010100", 
    95 to 99=> "100010110001000010111111", 100 to 103=> "111100100101000001111001", 
    104 to 109=> "101101100001000011000001", 110 to 113=> "101101010101000001101111", 
    114 to 119=> "100010000001000011000000", 120 to 123=> "110100100110000001101111", 
    124 to 129=> "100111010010000011000000", 130 to 133=> "101101110101000001101111", 
    134 to 139=> "100010010001000011000000", 140 to 143=> "100100100101000001101100", 
    144 to 149=> "110110110010000011000000", 150 to 153=> "110111110110000001110110", 
    154 to 159=> "101001110010000011000001", 160 to 163=> "111001010110000001101110", 
    164 to 169=> "101010110010000011000000", 170 to 173=> "100111010101000001110110", 
    174 to 179=> "111010110010000011000001", 180 to 183=> "111111100110000001100001", 
    184 to 189=> "101111110010000010111111", 190 to 193=> "100110100110000001010100", 
    194 to 199=> "111001110011000010111110", 200 to 203=> "110000100110000001100110", 
    204 to 209=> "100100100010000010111111", 210 to 213=> "110000000110000001100100", 
    214 to 219=> "100100000010000010111111", 220 to 223=> "101101000101000001100110", 
    224 to 229=> "100001110001000010111111", 230 to 233=> "101100010101000001101011", 
    234 to 239=> "100001000001000011000000", 240 to 243=> "100011000101000001110111", 
    244 to 249=> "110100100010000011000001", 250 to 253=> "100111010101000001110000", 
    254 to 259=> "111010110010000011000000", 260 to 263=> "110010110110000001011001", 
    264 to 269=> "100110000010000010111110", 270 to 273=> "110000110110000001100111", 
    274 to 279=> "100100110010000010111111", 280 to 283=> "101011100101000001100110", 
    284 to 289=> "100000110001000010111111", 290 to 293=> "110011110101000001101111", 
    294 to 299=> "100111000001000011000000", 300 to 303=> "101011010101000001100010", 
    304 to 309=> "100000100001000010111111", 310 to 313=> "100000110101000001101001", 
    314 to 319=> "110001000010000011000000", 320 to 323=> "100001100101000001001110", 
    324 to 329=> "110010010010000010111101", 330 to 333=> "100001010101000001100111", 
    334 to 339=> "110010000010000010111111", 340 to 343=> "110111110110000001101011", 
    344 to 349=> "101001110010000011000000", 350 to 353=> "110100000110000001110000", 
    354 to 359=> "100111000010000011000000", 360 to 363=> "101011010101000001011110", 
    364 to 369=> "100000100001000010111111", 370 to 373=> "101011000101000001110010", 
    374 to 379=> "100000010001000011000000", 380 to 383=> "110001010101000001101101", 
    384 to 389=> "100101000001000011000000", 390 to 393=> "101111100101000001100011", 
    394 to 399=> "100011110001000010111111", 400 to 403=> "111010010110000001111101", 
    404 to 409=> "101011110010000011000001", 410 to 413=> "100001010101000001110001", 
    414 to 419=> "110010000010000011000000", 420 to 423=> "100111100101000001110111", 
    424 to 429=> "111011010010000011000001", 430 to 433=> "101111110101000001100101", 
    434 to 439=> "100011110001000010111111", 440 to 443=> "111010000110000001111010", 
    444 to 449=> "101011100010000011000001", 450 to 453=> "110101110101000001110001", 
    454 to 459=> "101000010001000011000000", 460 to 463=> "100010110101000001101101", 
    464 to 469=> "110100000010000011000000", 470 to 473=> "111000000110000001110010", 
    474 to 479=> "101010000010000011000000", 480 to 483=> "100101010101000001101110", 
    484 to 489=> "111000000010000011000000", 490 to 493=> "111011010110000001101111", 
    494 to 499=> "101100100010000011000000", 500 to 503=> "101111000110000001100110", 
    504 to 509=> "100011010010000010111111", 510 to 513=> "110100000110000001100111", 
    514 to 519=> "100111000010000010111111", 520 to 523=> "110001110101000001101001", 
    524 => "110001110100000010011000", 525 to 529=> "100101010001000011000000", 
    530 to 533=> "111111000110000001110010", 534 to 539=> "101111010010000011000000", 
    540 to 543=> "110011010101000001110011", 544 to 549=> "100110100001000011000000", 
    550 to 553=> "111101000110000001110110", 554 to 559=> "101101110010000011000001", 
    560 to 563=> "110011100110000001101001", 564 to 569=> "100110110010000011000000" );
signal mem6 : mem_array := (
    0 to 3=> "101101110101000001101010", 4 to 9=> "100010010001000011000000", 
    10 to 13=> "101011010101000001110100", 14 to 19=> "100000010001000011000000", 
    20 to 23=> "101110100101000001101110", 24 to 29=> "100011000001000011000000", 
    30 to 33=> "110111100110000001100101", 34 to 39=> "101001100010000010111111", 
    40 to 43=> "111101010110000001110001", 44 => "111101010101000010011100", 
    45 to 49=> "101110000010000011000000", 50 to 53=> "101000010101000001101000", 
    54 to 59=> "111100100010000011000000", 60 to 63=> "110100000101000001110000", 
    64 to 69=> "100111000001000011000000", 70 to 73=> "111010000101000001110101", 
    74 => "111010000100000010011110", 75 to 79=> "101011100001000011000001", 
    80 to 83=> "110000010101000001100101", 84 to 89=> "100100000001000010111111", 
    90 to 93=> "101110100101000001100001", 94 => "101110100100000010010100", 
    95 to 99=> "100010110001000010111111", 100 to 103=> "111100100101000001111001", 
    104 to 109=> "101101100001000011000001", 110 to 113=> "101101010101000001101111", 
    114 to 119=> "100010000001000011000000", 120 to 123=> "110100100110000001101111", 
    124 to 129=> "100111010010000011000000", 130 to 133=> "101101110101000001101111", 
    134 to 139=> "100010010001000011000000", 140 to 143=> "100100100101000001101100", 
    144 to 149=> "110110110010000011000000", 150 to 153=> "110111110110000001110110", 
    154 to 159=> "101001110010000011000001", 160 to 163=> "111001010110000001101110", 
    164 to 169=> "101010110010000011000000", 170 to 173=> "100111010101000001110110", 
    174 to 179=> "111010110010000011000001", 180 to 183=> "111111100110000001100001", 
    184 to 189=> "101111110010000010111111", 190 to 193=> "100110100110000001010100", 
    194 to 199=> "111001110011000010111110", 200 to 203=> "110000100110000001100110", 
    204 to 209=> "100100100010000010111111", 210 to 213=> "110000000110000001100100", 
    214 to 219=> "100100000010000010111111", 220 to 223=> "101101000101000001100110", 
    224 to 229=> "100001110001000010111111", 230 to 233=> "101100010101000001101011", 
    234 to 239=> "100001000001000011000000", 240 to 243=> "100011000101000001110111", 
    244 to 249=> "110100100010000011000001", 250 to 253=> "100111010101000001110000", 
    254 to 259=> "111010110010000011000000", 260 to 263=> "110010110110000001011001", 
    264 to 269=> "100110000010000010111110", 270 to 273=> "110000110110000001100111", 
    274 to 279=> "100100110010000010111111", 280 to 283=> "101011100101000001100110", 
    284 to 289=> "100000110001000010111111", 290 to 293=> "110011110101000001101111", 
    294 to 299=> "100111000001000011000000", 300 to 303=> "101011010101000001100010", 
    304 to 309=> "100000100001000010111111", 310 to 313=> "100000110101000001101001", 
    314 to 319=> "110001000010000011000000", 320 to 323=> "100001100101000001001110", 
    324 to 329=> "110010010010000010111101", 330 to 333=> "100001010101000001100111", 
    334 to 339=> "110010000010000010111111", 340 to 343=> "110111110110000001101011", 
    344 to 349=> "101001110010000011000000", 350 to 353=> "110100000110000001110000", 
    354 to 359=> "100111000010000011000000", 360 to 363=> "101011010101000001011110", 
    364 to 369=> "100000100001000010111111", 370 to 373=> "101011000101000001110010", 
    374 to 379=> "100000010001000011000000", 380 to 383=> "110001010101000001101101", 
    384 to 389=> "100101000001000011000000", 390 to 393=> "101111100101000001100011", 
    394 to 399=> "100011110001000010111111", 400 to 403=> "111010010110000001111101", 
    404 to 409=> "101011110010000011000001", 410 to 413=> "100001010101000001110001", 
    414 to 419=> "110010000010000011000000", 420 to 423=> "100111100101000001110111", 
    424 to 429=> "111011010010000011000001", 430 to 433=> "101111110101000001100101", 
    434 to 439=> "100011110001000010111111", 440 to 443=> "111010000110000001111010", 
    444 to 449=> "101011100010000011000001", 450 to 453=> "110101110101000001110001", 
    454 to 459=> "101000010001000011000000", 460 to 463=> "100010110101000001101101", 
    464 to 469=> "110100000010000011000000", 470 to 473=> "111000000110000001110010", 
    474 to 479=> "101010000010000011000000", 480 to 483=> "100101010101000001101110", 
    484 to 489=> "111000000010000011000000", 490 to 493=> "111011010110000001101111", 
    494 to 499=> "101100100010000011000000", 500 to 503=> "101111000110000001100110", 
    504 to 509=> "100011010010000010111111", 510 to 513=> "110100000110000001100111", 
    514 to 519=> "100111000010000010111111", 520 to 523=> "110001110101000001101001", 
    524 => "110001110100000010011000", 525 to 529=> "100101010001000011000000", 
    530 to 533=> "111111000110000001110010", 534 to 539=> "101111010010000011000000", 
    540 to 543=> "110011010101000001110011", 544 to 549=> "100110100001000011000000", 
    550 to 553=> "111101000110000001110110", 554 to 559=> "101101110010000011000001", 
    560 to 563=> "110011100110000001101001", 564 to 569=> "100110110010000011000000" );
signal mem7 : mem_array := (
    0 to 3=> "101101110101000001101010", 4 to 9=> "100010010001000011000000", 
    10 to 13=> "101011010101000001110100", 14 to 19=> "100000010001000011000000", 
    20 to 23=> "101110100101000001101110", 24 to 29=> "100011000001000011000000", 
    30 to 33=> "110111100110000001100101", 34 to 39=> "101001100010000010111111", 
    40 to 43=> "111101010110000001110001", 44 => "111101010101000010011100", 
    45 to 49=> "101110000010000011000000", 50 to 53=> "101000010101000001101000", 
    54 to 59=> "111100100010000011000000", 60 to 63=> "110100000101000001110000", 
    64 to 69=> "100111000001000011000000", 70 to 73=> "111010000101000001110101", 
    74 => "111010000100000010011110", 75 to 79=> "101011100001000011000001", 
    80 to 83=> "110000010101000001100101", 84 to 89=> "100100000001000010111111", 
    90 to 93=> "101110100101000001100001", 94 => "101110100100000010010100", 
    95 to 99=> "100010110001000010111111", 100 to 103=> "111100100101000001111001", 
    104 to 109=> "101101100001000011000001", 110 to 113=> "101101010101000001101111", 
    114 to 119=> "100010000001000011000000", 120 to 123=> "110100100110000001101111", 
    124 to 129=> "100111010010000011000000", 130 to 133=> "101101110101000001101111", 
    134 to 139=> "100010010001000011000000", 140 to 143=> "100100100101000001101100", 
    144 to 149=> "110110110010000011000000", 150 to 153=> "110111110110000001110110", 
    154 to 159=> "101001110010000011000001", 160 to 163=> "111001010110000001101110", 
    164 to 169=> "101010110010000011000000", 170 to 173=> "100111010101000001110110", 
    174 to 179=> "111010110010000011000001", 180 to 183=> "111111100110000001100001", 
    184 to 189=> "101111110010000010111111", 190 to 193=> "100110100110000001010100", 
    194 to 199=> "111001110011000010111110", 200 to 203=> "110000100110000001100110", 
    204 to 209=> "100100100010000010111111", 210 to 213=> "110000000110000001100100", 
    214 to 219=> "100100000010000010111111", 220 to 223=> "101101000101000001100110", 
    224 to 229=> "100001110001000010111111", 230 to 233=> "101100010101000001101011", 
    234 to 239=> "100001000001000011000000", 240 to 243=> "100011000101000001110111", 
    244 to 249=> "110100100010000011000001", 250 to 253=> "100111010101000001110000", 
    254 to 259=> "111010110010000011000000", 260 to 263=> "110010110110000001011001", 
    264 to 269=> "100110000010000010111110", 270 to 273=> "110000110110000001100111", 
    274 to 279=> "100100110010000010111111", 280 to 283=> "101011100101000001100110", 
    284 to 289=> "100000110001000010111111", 290 to 293=> "110011110101000001101111", 
    294 to 299=> "100111000001000011000000", 300 to 303=> "101011010101000001100010", 
    304 to 309=> "100000100001000010111111", 310 to 313=> "100000110101000001101001", 
    314 to 319=> "110001000010000011000000", 320 to 323=> "100001100101000001001110", 
    324 to 329=> "110010010010000010111101", 330 to 333=> "100001010101000001100111", 
    334 to 339=> "110010000010000010111111", 340 to 343=> "110111110110000001101011", 
    344 to 349=> "101001110010000011000000", 350 to 353=> "110100000110000001110000", 
    354 to 359=> "100111000010000011000000", 360 to 363=> "101011010101000001011110", 
    364 to 369=> "100000100001000010111111", 370 to 373=> "101011000101000001110010", 
    374 to 379=> "100000010001000011000000", 380 to 383=> "110001010101000001101101", 
    384 to 389=> "100101000001000011000000", 390 to 393=> "101111100101000001100011", 
    394 to 399=> "100011110001000010111111", 400 to 403=> "111010010110000001111101", 
    404 to 409=> "101011110010000011000001", 410 to 413=> "100001010101000001110001", 
    414 to 419=> "110010000010000011000000", 420 to 423=> "100111100101000001110111", 
    424 to 429=> "111011010010000011000001", 430 to 433=> "101111110101000001100101", 
    434 to 439=> "100011110001000010111111", 440 to 443=> "111010000110000001111010", 
    444 to 449=> "101011100010000011000001", 450 to 453=> "110101110101000001110001", 
    454 to 459=> "101000010001000011000000", 460 to 463=> "100010110101000001101101", 
    464 to 469=> "110100000010000011000000", 470 to 473=> "111000000110000001110010", 
    474 to 479=> "101010000010000011000000", 480 to 483=> "100101010101000001101110", 
    484 to 489=> "111000000010000011000000", 490 to 493=> "111011010110000001101111", 
    494 to 499=> "101100100010000011000000", 500 to 503=> "101111000110000001100110", 
    504 to 509=> "100011010010000010111111", 510 to 513=> "110100000110000001100111", 
    514 to 519=> "100111000010000010111111", 520 to 523=> "110001110101000001101001", 
    524 => "110001110100000010011000", 525 to 529=> "100101010001000011000000", 
    530 to 533=> "111111000110000001110010", 534 to 539=> "101111010010000011000000", 
    540 to 543=> "110011010101000001110011", 544 to 549=> "100110100001000011000000", 
    550 to 553=> "111101000110000001110110", 554 to 559=> "101101110010000011000001", 
    560 to 563=> "110011100110000001101001", 564 to 569=> "100110110010000011000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem0 : signal is "block_rom";
attribute syn_rom_style of mem1 : signal is "block_rom";
attribute syn_rom_style of mem2 : signal is "block_rom";
attribute syn_rom_style of mem3 : signal is "block_rom";
attribute syn_rom_style of mem4 : signal is "block_rom";
attribute syn_rom_style of mem5 : signal is "block_rom";
attribute syn_rom_style of mem6 : signal is "block_rom";
attribute syn_rom_style of mem7 : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem0 : signal is "block";
attribute ROM_STYLE of mem1 : signal is "block";
attribute ROM_STYLE of mem2 : signal is "block";
attribute ROM_STYLE of mem3 : signal is "block";
attribute ROM_STYLE of mem4 : signal is "block";
attribute ROM_STYLE of mem5 : signal is "block";
attribute ROM_STYLE of mem6 : signal is "block";
attribute ROM_STYLE of mem7 : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (addr2) 
begin
      addr2_tmp <= addr2;
--synthesis translate_off
      if (CONV_INTEGER(addr2) > mem_size-1) then
           addr2_tmp <= (others => '0');
      else 
           addr2_tmp <= addr2;
      end if;
--synthesis translate_on
end process;

memory_access_guard_3: process (addr3) 
begin
      addr3_tmp <= addr3;
--synthesis translate_off
      if (CONV_INTEGER(addr3) > mem_size-1) then
           addr3_tmp <= (others => '0');
      else 
           addr3_tmp <= addr3;
      end if;
--synthesis translate_on
end process;

memory_access_guard_4: process (addr4) 
begin
      addr4_tmp <= addr4;
--synthesis translate_off
      if (CONV_INTEGER(addr4) > mem_size-1) then
           addr4_tmp <= (others => '0');
      else 
           addr4_tmp <= addr4;
      end if;
--synthesis translate_on
end process;

memory_access_guard_5: process (addr5) 
begin
      addr5_tmp <= addr5;
--synthesis translate_off
      if (CONV_INTEGER(addr5) > mem_size-1) then
           addr5_tmp <= (others => '0');
      else 
           addr5_tmp <= addr5;
      end if;
--synthesis translate_on
end process;

memory_access_guard_6: process (addr6) 
begin
      addr6_tmp <= addr6;
--synthesis translate_off
      if (CONV_INTEGER(addr6) > mem_size-1) then
           addr6_tmp <= (others => '0');
      else 
           addr6_tmp <= addr6;
      end if;
--synthesis translate_on
end process;

memory_access_guard_7: process (addr7) 
begin
      addr7_tmp <= addr7;
--synthesis translate_off
      if (CONV_INTEGER(addr7) > mem_size-1) then
           addr7_tmp <= (others => '0');
      else 
           addr7_tmp <= addr7;
      end if;
--synthesis translate_on
end process;

memory_access_guard_8: process (addr8) 
begin
      addr8_tmp <= addr8;
--synthesis translate_off
      if (CONV_INTEGER(addr8) > mem_size-1) then
           addr8_tmp <= (others => '0');
      else 
           addr8_tmp <= addr8;
      end if;
--synthesis translate_on
end process;

memory_access_guard_9: process (addr9) 
begin
      addr9_tmp <= addr9;
--synthesis translate_off
      if (CONV_INTEGER(addr9) > mem_size-1) then
           addr9_tmp <= (others => '0');
      else 
           addr9_tmp <= addr9;
      end if;
--synthesis translate_on
end process;

memory_access_guard_10: process (addr10) 
begin
      addr10_tmp <= addr10;
--synthesis translate_off
      if (CONV_INTEGER(addr10) > mem_size-1) then
           addr10_tmp <= (others => '0');
      else 
           addr10_tmp <= addr10;
      end if;
--synthesis translate_on
end process;

memory_access_guard_11: process (addr11) 
begin
      addr11_tmp <= addr11;
--synthesis translate_off
      if (CONV_INTEGER(addr11) > mem_size-1) then
           addr11_tmp <= (others => '0');
      else 
           addr11_tmp <= addr11;
      end if;
--synthesis translate_on
end process;

memory_access_guard_12: process (addr12) 
begin
      addr12_tmp <= addr12;
--synthesis translate_off
      if (CONV_INTEGER(addr12) > mem_size-1) then
           addr12_tmp <= (others => '0');
      else 
           addr12_tmp <= addr12;
      end if;
--synthesis translate_on
end process;

memory_access_guard_13: process (addr13) 
begin
      addr13_tmp <= addr13;
--synthesis translate_off
      if (CONV_INTEGER(addr13) > mem_size-1) then
           addr13_tmp <= (others => '0');
      else 
           addr13_tmp <= addr13;
      end if;
--synthesis translate_on
end process;

memory_access_guard_14: process (addr14) 
begin
      addr14_tmp <= addr14;
--synthesis translate_off
      if (CONV_INTEGER(addr14) > mem_size-1) then
           addr14_tmp <= (others => '0');
      else 
           addr14_tmp <= addr14;
      end if;
--synthesis translate_on
end process;

memory_access_guard_15: process (addr15) 
begin
      addr15_tmp <= addr15;
--synthesis translate_off
      if (CONV_INTEGER(addr15) > mem_size-1) then
           addr15_tmp <= (others => '0');
      else 
           addr15_tmp <= addr15;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem0(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem0(CONV_INTEGER(addr1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2 <= mem1(CONV_INTEGER(addr2_tmp)); 
        end if;
        if (ce3 = '1') then 
            q3 <= mem1(CONV_INTEGER(addr3_tmp)); 
        end if;
        if (ce4 = '1') then 
            q4 <= mem2(CONV_INTEGER(addr4_tmp)); 
        end if;
        if (ce5 = '1') then 
            q5 <= mem2(CONV_INTEGER(addr5_tmp)); 
        end if;
        if (ce6 = '1') then 
            q6 <= mem3(CONV_INTEGER(addr6_tmp)); 
        end if;
        if (ce7 = '1') then 
            q7 <= mem3(CONV_INTEGER(addr7_tmp)); 
        end if;
        if (ce8 = '1') then 
            q8 <= mem4(CONV_INTEGER(addr8_tmp)); 
        end if;
        if (ce9 = '1') then 
            q9 <= mem4(CONV_INTEGER(addr9_tmp)); 
        end if;
        if (ce10 = '1') then 
            q10 <= mem5(CONV_INTEGER(addr10_tmp)); 
        end if;
        if (ce11 = '1') then 
            q11 <= mem5(CONV_INTEGER(addr11_tmp)); 
        end if;
        if (ce12 = '1') then 
            q12 <= mem6(CONV_INTEGER(addr12_tmp)); 
        end if;
        if (ce13 = '1') then 
            q13 <= mem6(CONV_INTEGER(addr13_tmp)); 
        end if;
        if (ce14 = '1') then 
            q14 <= mem7(CONV_INTEGER(addr14_tmp)); 
        end if;
        if (ce15 = '1') then 
            q15 <= mem7(CONV_INTEGER(addr15_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity algo_unpacked_coedEe is
    generic (
        DataWidth : INTEGER := 24;
        AddressRange : INTEGER := 570;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address2 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address3 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address4 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address5 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address6 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address7 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address8 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address9 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address10 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address11 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address12 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address13 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address14 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address15 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of algo_unpacked_coedEe is
    component algo_unpacked_coedEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR;
            addr2 : IN STD_LOGIC_VECTOR;
            ce2 : IN STD_LOGIC;
            q2 : OUT STD_LOGIC_VECTOR;
            addr3 : IN STD_LOGIC_VECTOR;
            ce3 : IN STD_LOGIC;
            q3 : OUT STD_LOGIC_VECTOR;
            addr4 : IN STD_LOGIC_VECTOR;
            ce4 : IN STD_LOGIC;
            q4 : OUT STD_LOGIC_VECTOR;
            addr5 : IN STD_LOGIC_VECTOR;
            ce5 : IN STD_LOGIC;
            q5 : OUT STD_LOGIC_VECTOR;
            addr6 : IN STD_LOGIC_VECTOR;
            ce6 : IN STD_LOGIC;
            q6 : OUT STD_LOGIC_VECTOR;
            addr7 : IN STD_LOGIC_VECTOR;
            ce7 : IN STD_LOGIC;
            q7 : OUT STD_LOGIC_VECTOR;
            addr8 : IN STD_LOGIC_VECTOR;
            ce8 : IN STD_LOGIC;
            q8 : OUT STD_LOGIC_VECTOR;
            addr9 : IN STD_LOGIC_VECTOR;
            ce9 : IN STD_LOGIC;
            q9 : OUT STD_LOGIC_VECTOR;
            addr10 : IN STD_LOGIC_VECTOR;
            ce10 : IN STD_LOGIC;
            q10 : OUT STD_LOGIC_VECTOR;
            addr11 : IN STD_LOGIC_VECTOR;
            ce11 : IN STD_LOGIC;
            q11 : OUT STD_LOGIC_VECTOR;
            addr12 : IN STD_LOGIC_VECTOR;
            ce12 : IN STD_LOGIC;
            q12 : OUT STD_LOGIC_VECTOR;
            addr13 : IN STD_LOGIC_VECTOR;
            ce13 : IN STD_LOGIC;
            q13 : OUT STD_LOGIC_VECTOR;
            addr14 : IN STD_LOGIC_VECTOR;
            ce14 : IN STD_LOGIC;
            q14 : OUT STD_LOGIC_VECTOR;
            addr15 : IN STD_LOGIC_VECTOR;
            ce15 : IN STD_LOGIC;
            q15 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    algo_unpacked_coedEe_rom_U :  component algo_unpacked_coedEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1,
        addr2 => address2,
        ce2 => ce2,
        q2 => q2,
        addr3 => address3,
        ce3 => ce3,
        q3 => q3,
        addr4 => address4,
        ce4 => ce4,
        q4 => q4,
        addr5 => address5,
        ce5 => ce5,
        q5 => q5,
        addr6 => address6,
        ce6 => ce6,
        q6 => q6,
        addr7 => address7,
        ce7 => ce7,
        q7 => q7,
        addr8 => address8,
        ce8 => ce8,
        q8 => q8,
        addr9 => address9,
        ce9 => ce9,
        q9 => q9,
        addr10 => address10,
        ce10 => ce10,
        q10 => q10,
        addr11 => address11,
        ce11 => ce11,
        q11 => q11,
        addr12 => address12,
        ce12 => ce12,
        q12 => q12,
        addr13 => address13,
        ce13 => ce13,
        q13 => q13,
        addr14 => address14,
        ce14 => ce14,
        q14 => q14,
        addr15 => address15,
        ce15 => ce15,
        q15 => q15);

end architecture;


