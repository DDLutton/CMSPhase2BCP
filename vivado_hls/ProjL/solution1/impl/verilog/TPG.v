// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TPG (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_int_V,
        lincoeff_V,
        r_0_shift_reg_V_i,
        r_0_shift_reg_V_o,
        r_0_shift_reg_V_o_ap_vld,
        r_1_shift_reg_V_i,
        r_1_shift_reg_V_o,
        r_1_shift_reg_V_o_ap_vld,
        r_2_shift_reg_V_i,
        r_2_shift_reg_V_o,
        r_2_shift_reg_V_o_ap_vld,
        r_3_shift_reg_V_i,
        r_3_shift_reg_V_o,
        r_3_shift_reg_V_o_ap_vld,
        r_0_peak_reg_V_read,
        r_1_peak_reg_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [13:0] data_int_V;
input  [23:0] lincoeff_V;
input  [17:0] r_0_shift_reg_V_i;
output  [17:0] r_0_shift_reg_V_o;
output   r_0_shift_reg_V_o_ap_vld;
input  [17:0] r_1_shift_reg_V_i;
output  [17:0] r_1_shift_reg_V_o;
output   r_1_shift_reg_V_o_ap_vld;
input  [17:0] r_2_shift_reg_V_i;
output  [17:0] r_2_shift_reg_V_o;
output   r_2_shift_reg_V_o_ap_vld;
input  [17:0] r_3_shift_reg_V_i;
output  [17:0] r_3_shift_reg_V_o;
output   r_3_shift_reg_V_o_ap_vld;
input  [18:0] r_0_peak_reg_V_read;
input  [18:0] r_1_peak_reg_V_read;
output  [15:0] ap_return_0;
output  [18:0] ap_return_1;
output  [18:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_0_shift_reg_V_o_ap_vld;
reg r_1_shift_reg_V_o_ap_vld;
reg r_2_shift_reg_V_o_ap_vld;
reg r_3_shift_reg_V_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [18:0] r_0_peak_reg_V_read_1_reg_619;
reg   [18:0] r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg;
wire   [17:0] linearizerOutput_V_1_fu_242_p3;
reg   [17:0] linearizerOutput_V_1_reg_625;
reg   [17:0] r_0_shift_reg_V_rea_reg_631;
reg   [18:0] tmp_578_reg_637;
reg   [18:0] mul_V_reg_642;
reg   [15:0] tmp_18_1_reg_647;
reg   [17:0] tmp_15_reg_653;
reg   [17:0] tmp_17_reg_658;
wire   [0:0] tmp_2_fu_343_p2;
reg   [0:0] tmp_2_reg_663;
wire   [0:0] tmp_4_fu_349_p2;
reg   [0:0] tmp_4_reg_668;
reg   [0:0] tmp_4_reg_668_pp0_iter1_reg;
wire   [0:0] icmp_fu_365_p2;
reg   [0:0] icmp_reg_673;
reg   [0:0] icmp_reg_673_pp0_iter1_reg;
reg   [15:0] tmp_6_reg_678;
reg   [15:0] tmp_6_reg_678_pp0_iter1_reg;
wire   [17:0] filterOutput_V_fu_520_p3;
reg   [17:0] filterOutput_V_reg_683;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] uncorrectedADC_V_fu_185_p1;
wire   [11:0] base_V_fu_189_p1;
wire   [12:0] lhs_V_fu_203_p1;
wire   [12:0] rhs_V_fu_207_p1;
wire  signed [12:0] r_V_3_fu_211_p2;
wire   [7:0] mult_fu_193_p4;
wire  signed [20:0] r_V_fu_604_p2;
wire   [0:0] tmp_7_fu_234_p3;
wire   [17:0] linearizerOutput_V_fu_225_p4;
wire   [22:0] p_shl_fu_251_p3;
wire   [23:0] p_shl_cast_fu_259_p1;
wire   [23:0] p_neg_fu_263_p2;
wire   [19:0] p_shl1_fu_273_p3;
wire  signed [24:0] p_neg_cast_fu_269_p1;
wire   [24:0] p_shl1_cast_fu_281_p1;
wire   [24:0] r_V_4_fu_285_p2;
wire  signed [24:0] r_V_6_fu_611_p2;
wire   [6:0] tmp_9_fu_355_p4;
wire   [22:0] p_shl2_fu_390_p3;
wire   [23:0] p_shl2_cast_fu_397_p1;
wire   [23:0] lhs_V_3_2_cast7_fu_387_p1;
wire   [23:0] r_V_6_2_fu_401_p2;
wire  signed [17:0] tmp_10_fu_407_p4;
wire   [22:0] p_shl3_fu_421_p3;
wire   [20:0] p_shl4_fu_432_p3;
wire   [23:0] p_shl3_cast_fu_428_p1;
wire   [23:0] p_shl4_cast_fu_439_p1;
wire   [23:0] r_V_6_3_fu_443_p2;
wire  signed [17:0] tmp_13_fu_449_p4;
wire   [18:0] tmp_18_1_cast_fu_384_p1;
wire  signed [18:0] tmp_11_fu_417_p1;
wire  signed [18:0] tmp_14_fu_459_p1;
wire   [18:0] tmp5_fu_469_p2;
wire   [17:0] tmp_fu_381_p1;
wire   [17:0] tmp_16_fu_474_p2;
wire   [18:0] tmp4_fu_479_p2;
wire   [18:0] tmp3_fu_463_p2;
wire   [17:0] tmp_19_fu_484_p2;
wire   [17:0] tmp_20_fu_490_p2;
wire   [18:0] addconv_3_fu_495_p2;
wire   [0:0] tmp_8_fu_507_p3;
wire   [0:0] or_cond_fu_515_p2;
wire   [17:0] addconv_3_cast_fu_501_p2;
wire   [18:0] filterOutput_V_cast_fu_528_p1;
wire   [0:0] tmp_3_fu_531_p2;
wire   [15:0] tmpPeak_V_fu_541_p3;
wire   [5:0] tmp_21_fu_551_p4;
wire   [0:0] icmp1_fu_561_p2;
wire   [9:0] tmp_18_fu_547_p1;
wire   [0:0] or_cond1_fu_536_p2;
wire   [9:0] p_phitmp3_fu_567_p3;
wire   [9:0] agg_result_V_1_fu_575_p3;
wire   [15:0] agg_result_V_1_cast_fu_583_p1;
wire   [7:0] r_V_fu_604_p1;
wire  signed [6:0] r_V_6_fu_611_p0;
wire   [17:0] r_V_6_fu_611_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [24:0] r_V_6_fu_611_p10;
wire   [20:0] r_V_fu_604_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

algo_unpacked_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 21 ))
algo_unpacked_mulbkb_U1(
    .din0(r_V_3_fu_211_p2),
    .din1(r_V_fu_604_p1),
    .dout(r_V_fu_604_p2)
);

algo_unpacked_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 25 ))
algo_unpacked_mulcud_U2(
    .din0(r_V_6_fu_611_p0),
    .din1(r_V_6_fu_611_p1),
    .dout(r_V_6_fu_611_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filterOutput_V_reg_683 <= filterOutput_V_fu_520_p3;
        icmp_reg_673 <= icmp_fu_365_p2;
        icmp_reg_673_pp0_iter1_reg <= icmp_reg_673;
        linearizerOutput_V_1_reg_625 <= linearizerOutput_V_1_fu_242_p3;
        mul_V_reg_642 <= {{r_V_6_fu_611_p2[24:6]}};
        r_0_peak_reg_V_read_1_reg_619 <= r_0_peak_reg_V_read;
        r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg <= r_0_peak_reg_V_read_1_reg_619;
        r_0_shift_reg_V_rea_reg_631 <= r_0_shift_reg_V_i;
        tmp_15_reg_653 <= {{r_V_6_fu_611_p2[23:6]}};
        tmp_17_reg_658 <= {{r_V_4_fu_285_p2[23:6]}};
        tmp_18_1_reg_647 <= {{r_1_shift_reg_V_i[17:2]}};
        tmp_2_reg_663 <= tmp_2_fu_343_p2;
        tmp_4_reg_668 <= tmp_4_fu_349_p2;
        tmp_4_reg_668_pp0_iter1_reg <= tmp_4_reg_668;
        tmp_578_reg_637 <= {{r_V_4_fu_285_p2[24:6]}};
        tmp_6_reg_678 <= {{r_0_peak_reg_V_read[17:2]}};
        tmp_6_reg_678_pp0_iter1_reg <= tmp_6_reg_678;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        r_0_shift_reg_V_o_ap_vld = 1'b1;
    end else begin
        r_0_shift_reg_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        r_1_shift_reg_V_o_ap_vld = 1'b1;
    end else begin
        r_1_shift_reg_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        r_2_shift_reg_V_o_ap_vld = 1'b1;
    end else begin
        r_2_shift_reg_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        r_3_shift_reg_V_o_ap_vld = 1'b1;
    end else begin
        r_3_shift_reg_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addconv_3_cast_fu_501_p2 = (tmp_19_fu_484_p2 + tmp_20_fu_490_p2);

assign addconv_3_fu_495_p2 = (tmp4_fu_479_p2 + tmp3_fu_463_p2);

assign agg_result_V_1_cast_fu_583_p1 = agg_result_V_1_fu_575_p3;

assign agg_result_V_1_fu_575_p3 = ((or_cond1_fu_536_p2[0:0] === 1'b1) ? p_phitmp3_fu_567_p3 : 10'd0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = agg_result_V_1_cast_fu_583_p1;

assign ap_return_1 = filterOutput_V_cast_fu_528_p1;

assign ap_return_2 = r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg;

assign base_V_fu_189_p1 = lincoeff_V[11:0];

assign filterOutput_V_cast_fu_528_p1 = filterOutput_V_reg_683;

assign filterOutput_V_fu_520_p3 = ((or_cond_fu_515_p2[0:0] === 1'b1) ? 18'd0 : addconv_3_cast_fu_501_p2);

assign icmp1_fu_561_p2 = ((tmp_21_fu_551_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_fu_365_p2 = (($signed(tmp_9_fu_355_p4) > $signed(7'd0)) ? 1'b1 : 1'b0);

assign lhs_V_3_2_cast7_fu_387_p1 = r_0_shift_reg_V_rea_reg_631;

assign lhs_V_fu_203_p1 = uncorrectedADC_V_fu_185_p1;

assign linearizerOutput_V_1_fu_242_p3 = ((tmp_7_fu_234_p3[0:0] === 1'b1) ? 18'd0 : linearizerOutput_V_fu_225_p4);

assign linearizerOutput_V_fu_225_p4 = {{r_V_fu_604_p2[19:2]}};

assign mult_fu_193_p4 = {{lincoeff_V[23:16]}};

assign or_cond1_fu_536_p2 = (tmp_4_reg_668_pp0_iter1_reg & tmp_3_fu_531_p2);

assign or_cond_fu_515_p2 = (tmp_8_fu_507_p3 | tmp_2_reg_663);

assign p_neg_cast_fu_269_p1 = $signed(p_neg_fu_263_p2);

assign p_neg_fu_263_p2 = (24'd0 - p_shl_cast_fu_259_p1);

assign p_phitmp3_fu_567_p3 = ((icmp1_fu_561_p2[0:0] === 1'b1) ? 10'd1023 : tmp_18_fu_547_p1);

assign p_shl1_cast_fu_281_p1 = p_shl1_fu_273_p3;

assign p_shl1_fu_273_p3 = {{r_3_shift_reg_V_i}, {2'd0}};

assign p_shl2_cast_fu_397_p1 = p_shl2_fu_390_p3;

assign p_shl2_fu_390_p3 = {{r_0_shift_reg_V_rea_reg_631}, {5'd0}};

assign p_shl3_cast_fu_428_p1 = p_shl3_fu_421_p3;

assign p_shl3_fu_421_p3 = {{linearizerOutput_V_1_reg_625}, {5'd0}};

assign p_shl4_cast_fu_439_p1 = p_shl4_fu_432_p3;

assign p_shl4_fu_432_p3 = {{linearizerOutput_V_1_reg_625}, {3'd0}};

assign p_shl_cast_fu_259_p1 = p_shl_fu_251_p3;

assign p_shl_fu_251_p3 = {{r_3_shift_reg_V_i}, {5'd0}};

assign r_0_shift_reg_V_o = ((tmp_7_fu_234_p3[0:0] === 1'b1) ? 18'd0 : linearizerOutput_V_fu_225_p4);

assign r_1_shift_reg_V_o = r_0_shift_reg_V_i;

assign r_2_shift_reg_V_o = r_1_shift_reg_V_i;

assign r_3_shift_reg_V_o = r_2_shift_reg_V_i;

assign r_V_3_fu_211_p2 = (lhs_V_fu_203_p1 - rhs_V_fu_207_p1);

assign r_V_4_fu_285_p2 = ($signed(p_neg_cast_fu_269_p1) - $signed(p_shl1_cast_fu_281_p1));

assign r_V_6_2_fu_401_p2 = (p_shl2_cast_fu_397_p1 - lhs_V_3_2_cast7_fu_387_p1);

assign r_V_6_3_fu_443_p2 = (p_shl3_cast_fu_428_p1 - p_shl4_cast_fu_439_p1);

assign r_V_6_fu_611_p0 = 25'd33554397;

assign r_V_6_fu_611_p1 = r_V_6_fu_611_p10;

assign r_V_6_fu_611_p10 = r_2_shift_reg_V_i;

assign r_V_fu_604_p1 = r_V_fu_604_p10;

assign r_V_fu_604_p10 = mult_fu_193_p4;

assign rhs_V_fu_207_p1 = base_V_fu_189_p1;

assign tmp3_fu_463_p2 = ($signed(tmp_18_1_cast_fu_384_p1) + $signed(tmp_11_fu_417_p1));

assign tmp4_fu_479_p2 = (tmp5_fu_469_p2 + tmp_578_reg_637);

assign tmp5_fu_469_p2 = ($signed(mul_V_reg_642) + $signed(tmp_14_fu_459_p1));

assign tmpPeak_V_fu_541_p3 = ((icmp_reg_673_pp0_iter1_reg[0:0] === 1'b1) ? 16'd1023 : tmp_6_reg_678_pp0_iter1_reg);

assign tmp_10_fu_407_p4 = {{r_V_6_2_fu_401_p2[23:6]}};

assign tmp_11_fu_417_p1 = tmp_10_fu_407_p4;

assign tmp_13_fu_449_p4 = {{r_V_6_3_fu_443_p2[23:6]}};

assign tmp_14_fu_459_p1 = tmp_13_fu_449_p4;

assign tmp_16_fu_474_p2 = ($signed(tmp_13_fu_449_p4) + $signed(tmp_15_reg_653));

assign tmp_18_1_cast_fu_384_p1 = tmp_18_1_reg_647;

assign tmp_18_fu_547_p1 = tmpPeak_V_fu_541_p3[9:0];

assign tmp_19_fu_484_p2 = ($signed(tmp_10_fu_407_p4) + $signed(tmp_fu_381_p1));

assign tmp_20_fu_490_p2 = (tmp_17_reg_658 + tmp_16_fu_474_p2);

assign tmp_21_fu_551_p4 = {{tmpPeak_V_fu_541_p3[15:10]}};

assign tmp_2_fu_343_p2 = ((r_3_shift_reg_V_i == 18'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_531_p2 = (($signed(filterOutput_V_cast_fu_528_p1) < $signed(r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg)) ? 1'b1 : 1'b0);

assign tmp_4_fu_349_p2 = (($signed(r_0_peak_reg_V_read) > $signed(r_1_peak_reg_V_read)) ? 1'b1 : 1'b0);

assign tmp_7_fu_234_p3 = r_V_3_fu_211_p2[32'd12];

assign tmp_8_fu_507_p3 = addconv_3_fu_495_p2[32'd18];

assign tmp_9_fu_355_p4 = {{r_0_peak_reg_V_read[18:12]}};

assign tmp_fu_381_p1 = tmp_18_1_reg_647;

assign uncorrectedADC_V_fu_185_p1 = data_int_V[11:0];

endmodule //TPG
