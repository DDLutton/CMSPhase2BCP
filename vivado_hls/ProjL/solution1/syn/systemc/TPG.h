// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _TPG_HH_
#define _TPG_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "algo_unpacked_mulbkb.h"
#include "algo_unpacked_mulcud.h"

namespace ap_rtl {

struct TPG : public sc_module {
    // Port declarations 26
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<14> > data_int_V;
    sc_in< sc_lv<24> > lincoeff_V;
    sc_in< sc_lv<18> > r_0_shift_reg_V_i;
    sc_out< sc_lv<18> > r_0_shift_reg_V_o;
    sc_out< sc_logic > r_0_shift_reg_V_o_ap_vld;
    sc_in< sc_lv<18> > r_1_shift_reg_V_i;
    sc_out< sc_lv<18> > r_1_shift_reg_V_o;
    sc_out< sc_logic > r_1_shift_reg_V_o_ap_vld;
    sc_in< sc_lv<18> > r_2_shift_reg_V_i;
    sc_out< sc_lv<18> > r_2_shift_reg_V_o;
    sc_out< sc_logic > r_2_shift_reg_V_o_ap_vld;
    sc_in< sc_lv<18> > r_3_shift_reg_V_i;
    sc_out< sc_lv<18> > r_3_shift_reg_V_o;
    sc_out< sc_logic > r_3_shift_reg_V_o_ap_vld;
    sc_in< sc_lv<19> > r_0_peak_reg_V_read;
    sc_in< sc_lv<19> > r_1_peak_reg_V_read;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<19> > ap_return_1;
    sc_out< sc_lv<19> > ap_return_2;


    // Module declarations
    TPG(sc_module_name name);
    SC_HAS_PROCESS(TPG);

    ~TPG();

    sc_trace_file* mVcdFile;

    algo_unpacked_mulbkb<1,1,13,8,21>* algo_unpacked_mulbkb_U1;
    algo_unpacked_mulcud<1,1,7,18,25>* algo_unpacked_mulcud_U2;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<19> > r_0_peak_reg_V_read_1_reg_619;
    sc_signal< sc_lv<19> > r_0_peak_reg_V_read_1_reg_619_pp0_iter1_reg;
    sc_signal< sc_lv<18> > linearizerOutput_V_1_fu_242_p3;
    sc_signal< sc_lv<18> > linearizerOutput_V_1_reg_625;
    sc_signal< sc_lv<18> > r_0_shift_reg_V_rea_reg_631;
    sc_signal< sc_lv<19> > tmp_578_reg_637;
    sc_signal< sc_lv<19> > mul_V_reg_642;
    sc_signal< sc_lv<16> > tmp_18_1_reg_647;
    sc_signal< sc_lv<18> > tmp_15_reg_653;
    sc_signal< sc_lv<18> > tmp_17_reg_658;
    sc_signal< sc_lv<1> > tmp_2_fu_343_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_663;
    sc_signal< sc_lv<1> > tmp_4_fu_349_p2;
    sc_signal< sc_lv<1> > tmp_4_reg_668;
    sc_signal< sc_lv<1> > tmp_4_reg_668_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_fu_365_p2;
    sc_signal< sc_lv<1> > icmp_reg_673;
    sc_signal< sc_lv<1> > icmp_reg_673_pp0_iter1_reg;
    sc_signal< sc_lv<16> > tmp_6_reg_678;
    sc_signal< sc_lv<16> > tmp_6_reg_678_pp0_iter1_reg;
    sc_signal< sc_lv<18> > filterOutput_V_fu_520_p3;
    sc_signal< sc_lv<18> > filterOutput_V_reg_683;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<12> > uncorrectedADC_V_fu_185_p1;
    sc_signal< sc_lv<12> > base_V_fu_189_p1;
    sc_signal< sc_lv<13> > lhs_V_fu_203_p1;
    sc_signal< sc_lv<13> > rhs_V_fu_207_p1;
    sc_signal< sc_lv<13> > r_V_3_fu_211_p2;
    sc_signal< sc_lv<8> > mult_fu_193_p4;
    sc_signal< sc_lv<21> > r_V_fu_604_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_234_p3;
    sc_signal< sc_lv<18> > linearizerOutput_V_fu_225_p4;
    sc_signal< sc_lv<23> > p_shl_fu_251_p3;
    sc_signal< sc_lv<24> > p_shl_cast_fu_259_p1;
    sc_signal< sc_lv<24> > p_neg_fu_263_p2;
    sc_signal< sc_lv<20> > p_shl1_fu_273_p3;
    sc_signal< sc_lv<25> > p_neg_cast_fu_269_p1;
    sc_signal< sc_lv<25> > p_shl1_cast_fu_281_p1;
    sc_signal< sc_lv<25> > r_V_4_fu_285_p2;
    sc_signal< sc_lv<25> > r_V_6_fu_611_p2;
    sc_signal< sc_lv<7> > tmp_9_fu_355_p4;
    sc_signal< sc_lv<23> > p_shl2_fu_390_p3;
    sc_signal< sc_lv<24> > p_shl2_cast_fu_397_p1;
    sc_signal< sc_lv<24> > lhs_V_3_2_cast7_fu_387_p1;
    sc_signal< sc_lv<24> > r_V_6_2_fu_401_p2;
    sc_signal< sc_lv<18> > tmp_10_fu_407_p4;
    sc_signal< sc_lv<23> > p_shl3_fu_421_p3;
    sc_signal< sc_lv<21> > p_shl4_fu_432_p3;
    sc_signal< sc_lv<24> > p_shl3_cast_fu_428_p1;
    sc_signal< sc_lv<24> > p_shl4_cast_fu_439_p1;
    sc_signal< sc_lv<24> > r_V_6_3_fu_443_p2;
    sc_signal< sc_lv<18> > tmp_13_fu_449_p4;
    sc_signal< sc_lv<19> > tmp_18_1_cast_fu_384_p1;
    sc_signal< sc_lv<19> > tmp_11_fu_417_p1;
    sc_signal< sc_lv<19> > tmp_14_fu_459_p1;
    sc_signal< sc_lv<19> > tmp5_fu_469_p2;
    sc_signal< sc_lv<18> > tmp_fu_381_p1;
    sc_signal< sc_lv<18> > tmp_16_fu_474_p2;
    sc_signal< sc_lv<19> > tmp4_fu_479_p2;
    sc_signal< sc_lv<19> > tmp3_fu_463_p2;
    sc_signal< sc_lv<18> > tmp_19_fu_484_p2;
    sc_signal< sc_lv<18> > tmp_20_fu_490_p2;
    sc_signal< sc_lv<19> > addconv_3_fu_495_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_507_p3;
    sc_signal< sc_lv<1> > or_cond_fu_515_p2;
    sc_signal< sc_lv<18> > addconv_3_cast_fu_501_p2;
    sc_signal< sc_lv<19> > filterOutput_V_cast_fu_528_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_531_p2;
    sc_signal< sc_lv<16> > tmpPeak_V_fu_541_p3;
    sc_signal< sc_lv<6> > tmp_21_fu_551_p4;
    sc_signal< sc_lv<1> > icmp1_fu_561_p2;
    sc_signal< sc_lv<10> > tmp_18_fu_547_p1;
    sc_signal< sc_lv<1> > or_cond1_fu_536_p2;
    sc_signal< sc_lv<10> > p_phitmp3_fu_567_p3;
    sc_signal< sc_lv<10> > agg_result_V_1_fu_575_p3;
    sc_signal< sc_lv<16> > agg_result_V_1_cast_fu_583_p1;
    sc_signal< sc_lv<8> > r_V_fu_604_p1;
    sc_signal< sc_lv<7> > r_V_6_fu_611_p0;
    sc_signal< sc_lv<18> > r_V_6_fu_611_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<25> > r_V_6_fu_611_p10;
    sc_signal< sc_lv<21> > r_V_fu_604_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<18> ap_const_lv18_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<16> ap_const_lv16_3FF;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<10> ap_const_lv10_3FF;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<25> ap_const_lv25_1FFFFDD;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_addconv_3_cast_fu_501_p2();
    void thread_addconv_3_fu_495_p2();
    void thread_agg_result_V_1_cast_fu_583_p1();
    void thread_agg_result_V_1_fu_575_p3();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_base_V_fu_189_p1();
    void thread_filterOutput_V_cast_fu_528_p1();
    void thread_filterOutput_V_fu_520_p3();
    void thread_icmp1_fu_561_p2();
    void thread_icmp_fu_365_p2();
    void thread_lhs_V_3_2_cast7_fu_387_p1();
    void thread_lhs_V_fu_203_p1();
    void thread_linearizerOutput_V_1_fu_242_p3();
    void thread_linearizerOutput_V_fu_225_p4();
    void thread_mult_fu_193_p4();
    void thread_or_cond1_fu_536_p2();
    void thread_or_cond_fu_515_p2();
    void thread_p_neg_cast_fu_269_p1();
    void thread_p_neg_fu_263_p2();
    void thread_p_phitmp3_fu_567_p3();
    void thread_p_shl1_cast_fu_281_p1();
    void thread_p_shl1_fu_273_p3();
    void thread_p_shl2_cast_fu_397_p1();
    void thread_p_shl2_fu_390_p3();
    void thread_p_shl3_cast_fu_428_p1();
    void thread_p_shl3_fu_421_p3();
    void thread_p_shl4_cast_fu_439_p1();
    void thread_p_shl4_fu_432_p3();
    void thread_p_shl_cast_fu_259_p1();
    void thread_p_shl_fu_251_p3();
    void thread_r_0_shift_reg_V_o();
    void thread_r_0_shift_reg_V_o_ap_vld();
    void thread_r_1_shift_reg_V_o();
    void thread_r_1_shift_reg_V_o_ap_vld();
    void thread_r_2_shift_reg_V_o();
    void thread_r_2_shift_reg_V_o_ap_vld();
    void thread_r_3_shift_reg_V_o();
    void thread_r_3_shift_reg_V_o_ap_vld();
    void thread_r_V_3_fu_211_p2();
    void thread_r_V_4_fu_285_p2();
    void thread_r_V_6_2_fu_401_p2();
    void thread_r_V_6_3_fu_443_p2();
    void thread_r_V_6_fu_611_p0();
    void thread_r_V_6_fu_611_p1();
    void thread_r_V_6_fu_611_p10();
    void thread_r_V_fu_604_p1();
    void thread_r_V_fu_604_p10();
    void thread_rhs_V_fu_207_p1();
    void thread_tmp3_fu_463_p2();
    void thread_tmp4_fu_479_p2();
    void thread_tmp5_fu_469_p2();
    void thread_tmpPeak_V_fu_541_p3();
    void thread_tmp_10_fu_407_p4();
    void thread_tmp_11_fu_417_p1();
    void thread_tmp_13_fu_449_p4();
    void thread_tmp_14_fu_459_p1();
    void thread_tmp_16_fu_474_p2();
    void thread_tmp_18_1_cast_fu_384_p1();
    void thread_tmp_18_fu_547_p1();
    void thread_tmp_19_fu_484_p2();
    void thread_tmp_20_fu_490_p2();
    void thread_tmp_21_fu_551_p4();
    void thread_tmp_2_fu_343_p2();
    void thread_tmp_3_fu_531_p2();
    void thread_tmp_4_fu_349_p2();
    void thread_tmp_7_fu_234_p3();
    void thread_tmp_8_fu_507_p3();
    void thread_tmp_9_fu_355_p4();
    void thread_tmp_fu_381_p1();
    void thread_uncorrectedADC_V_fu_185_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
