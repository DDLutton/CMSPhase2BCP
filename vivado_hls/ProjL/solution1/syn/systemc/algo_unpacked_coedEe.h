// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __algo_unpacked_coedEe_H__
#define __algo_unpacked_coedEe_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct algo_unpacked_coedEe_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 24;
  static const unsigned AddressRange = 570;
  static const unsigned AddressWidth = 10;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in <sc_lv<AddressWidth> > address2;
sc_core::sc_in <sc_logic> ce2;
sc_core::sc_out <sc_lv<DataWidth> > q2;
sc_core::sc_in <sc_lv<AddressWidth> > address3;
sc_core::sc_in <sc_logic> ce3;
sc_core::sc_out <sc_lv<DataWidth> > q3;
sc_core::sc_in <sc_lv<AddressWidth> > address4;
sc_core::sc_in <sc_logic> ce4;
sc_core::sc_out <sc_lv<DataWidth> > q4;
sc_core::sc_in <sc_lv<AddressWidth> > address5;
sc_core::sc_in <sc_logic> ce5;
sc_core::sc_out <sc_lv<DataWidth> > q5;
sc_core::sc_in <sc_lv<AddressWidth> > address6;
sc_core::sc_in <sc_logic> ce6;
sc_core::sc_out <sc_lv<DataWidth> > q6;
sc_core::sc_in <sc_lv<AddressWidth> > address7;
sc_core::sc_in <sc_logic> ce7;
sc_core::sc_out <sc_lv<DataWidth> > q7;
sc_core::sc_in <sc_lv<AddressWidth> > address8;
sc_core::sc_in <sc_logic> ce8;
sc_core::sc_out <sc_lv<DataWidth> > q8;
sc_core::sc_in <sc_lv<AddressWidth> > address9;
sc_core::sc_in <sc_logic> ce9;
sc_core::sc_out <sc_lv<DataWidth> > q9;
sc_core::sc_in <sc_lv<AddressWidth> > address10;
sc_core::sc_in <sc_logic> ce10;
sc_core::sc_out <sc_lv<DataWidth> > q10;
sc_core::sc_in <sc_lv<AddressWidth> > address11;
sc_core::sc_in <sc_logic> ce11;
sc_core::sc_out <sc_lv<DataWidth> > q11;
sc_core::sc_in <sc_lv<AddressWidth> > address12;
sc_core::sc_in <sc_logic> ce12;
sc_core::sc_out <sc_lv<DataWidth> > q12;
sc_core::sc_in <sc_lv<AddressWidth> > address13;
sc_core::sc_in <sc_logic> ce13;
sc_core::sc_out <sc_lv<DataWidth> > q13;
sc_core::sc_in <sc_lv<AddressWidth> > address14;
sc_core::sc_in <sc_logic> ce14;
sc_core::sc_out <sc_lv<DataWidth> > q14;
sc_core::sc_in <sc_lv<AddressWidth> > address15;
sc_core::sc_in <sc_logic> ce15;
sc_core::sc_out <sc_lv<DataWidth> > q15;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(algo_unpacked_coedEe_ram) {
        ram[0] = "0b101101110101000001101010";
        ram[1] = "0b101101110101000001101010";
        ram[2] = "0b101101110101000001101010";
        ram[3] = "0b101101110101000001101010";
        for (unsigned i = 4; i < 10 ; i = i + 1) {
            ram[i] = "0b100010010001000011000000";
        }
        ram[10] = "0b101011010101000001110100";
        ram[11] = "0b101011010101000001110100";
        ram[12] = "0b101011010101000001110100";
        ram[13] = "0b101011010101000001110100";
        for (unsigned i = 14; i < 20 ; i = i + 1) {
            ram[i] = "0b100000010001000011000000";
        }
        ram[20] = "0b101110100101000001101110";
        ram[21] = "0b101110100101000001101110";
        ram[22] = "0b101110100101000001101110";
        ram[23] = "0b101110100101000001101110";
        for (unsigned i = 24; i < 30 ; i = i + 1) {
            ram[i] = "0b100011000001000011000000";
        }
        ram[30] = "0b110111100110000001100101";
        ram[31] = "0b110111100110000001100101";
        ram[32] = "0b110111100110000001100101";
        ram[33] = "0b110111100110000001100101";
        for (unsigned i = 34; i < 40 ; i = i + 1) {
            ram[i] = "0b101001100010000010111111";
        }
        ram[40] = "0b111101010110000001110001";
        ram[41] = "0b111101010110000001110001";
        ram[42] = "0b111101010110000001110001";
        ram[43] = "0b111101010110000001110001";
        ram[44] = "0b111101010101000010011100";
        for (unsigned i = 45; i < 50 ; i = i + 1) {
            ram[i] = "0b101110000010000011000000";
        }
        ram[50] = "0b101000010101000001101000";
        ram[51] = "0b101000010101000001101000";
        ram[52] = "0b101000010101000001101000";
        ram[53] = "0b101000010101000001101000";
        for (unsigned i = 54; i < 60 ; i = i + 1) {
            ram[i] = "0b111100100010000011000000";
        }
        ram[60] = "0b110100000101000001110000";
        ram[61] = "0b110100000101000001110000";
        ram[62] = "0b110100000101000001110000";
        ram[63] = "0b110100000101000001110000";
        for (unsigned i = 64; i < 70 ; i = i + 1) {
            ram[i] = "0b100111000001000011000000";
        }
        ram[70] = "0b111010000101000001110101";
        ram[71] = "0b111010000101000001110101";
        ram[72] = "0b111010000101000001110101";
        ram[73] = "0b111010000101000001110101";
        ram[74] = "0b111010000100000010011110";
        for (unsigned i = 75; i < 80 ; i = i + 1) {
            ram[i] = "0b101011100001000011000001";
        }
        ram[80] = "0b110000010101000001100101";
        ram[81] = "0b110000010101000001100101";
        ram[82] = "0b110000010101000001100101";
        ram[83] = "0b110000010101000001100101";
        for (unsigned i = 84; i < 90 ; i = i + 1) {
            ram[i] = "0b100100000001000010111111";
        }
        ram[90] = "0b101110100101000001100001";
        ram[91] = "0b101110100101000001100001";
        ram[92] = "0b101110100101000001100001";
        ram[93] = "0b101110100101000001100001";
        ram[94] = "0b101110100100000010010100";
        for (unsigned i = 95; i < 100 ; i = i + 1) {
            ram[i] = "0b100010110001000010111111";
        }
        ram[100] = "0b111100100101000001111001";
        ram[101] = "0b111100100101000001111001";
        ram[102] = "0b111100100101000001111001";
        ram[103] = "0b111100100101000001111001";
        for (unsigned i = 104; i < 110 ; i = i + 1) {
            ram[i] = "0b101101100001000011000001";
        }
        ram[110] = "0b101101010101000001101111";
        ram[111] = "0b101101010101000001101111";
        ram[112] = "0b101101010101000001101111";
        ram[113] = "0b101101010101000001101111";
        for (unsigned i = 114; i < 120 ; i = i + 1) {
            ram[i] = "0b100010000001000011000000";
        }
        ram[120] = "0b110100100110000001101111";
        ram[121] = "0b110100100110000001101111";
        ram[122] = "0b110100100110000001101111";
        ram[123] = "0b110100100110000001101111";
        for (unsigned i = 124; i < 130 ; i = i + 1) {
            ram[i] = "0b100111010010000011000000";
        }
        ram[130] = "0b101101110101000001101111";
        ram[131] = "0b101101110101000001101111";
        ram[132] = "0b101101110101000001101111";
        ram[133] = "0b101101110101000001101111";
        for (unsigned i = 134; i < 140 ; i = i + 1) {
            ram[i] = "0b100010010001000011000000";
        }
        ram[140] = "0b100100100101000001101100";
        ram[141] = "0b100100100101000001101100";
        ram[142] = "0b100100100101000001101100";
        ram[143] = "0b100100100101000001101100";
        for (unsigned i = 144; i < 150 ; i = i + 1) {
            ram[i] = "0b110110110010000011000000";
        }
        ram[150] = "0b110111110110000001110110";
        ram[151] = "0b110111110110000001110110";
        ram[152] = "0b110111110110000001110110";
        ram[153] = "0b110111110110000001110110";
        for (unsigned i = 154; i < 160 ; i = i + 1) {
            ram[i] = "0b101001110010000011000001";
        }
        ram[160] = "0b111001010110000001101110";
        ram[161] = "0b111001010110000001101110";
        ram[162] = "0b111001010110000001101110";
        ram[163] = "0b111001010110000001101110";
        for (unsigned i = 164; i < 170 ; i = i + 1) {
            ram[i] = "0b101010110010000011000000";
        }
        ram[170] = "0b100111010101000001110110";
        ram[171] = "0b100111010101000001110110";
        ram[172] = "0b100111010101000001110110";
        ram[173] = "0b100111010101000001110110";
        for (unsigned i = 174; i < 180 ; i = i + 1) {
            ram[i] = "0b111010110010000011000001";
        }
        ram[180] = "0b111111100110000001100001";
        ram[181] = "0b111111100110000001100001";
        ram[182] = "0b111111100110000001100001";
        ram[183] = "0b111111100110000001100001";
        for (unsigned i = 184; i < 190 ; i = i + 1) {
            ram[i] = "0b101111110010000010111111";
        }
        ram[190] = "0b100110100110000001010100";
        ram[191] = "0b100110100110000001010100";
        ram[192] = "0b100110100110000001010100";
        ram[193] = "0b100110100110000001010100";
        for (unsigned i = 194; i < 200 ; i = i + 1) {
            ram[i] = "0b111001110011000010111110";
        }
        ram[200] = "0b110000100110000001100110";
        ram[201] = "0b110000100110000001100110";
        ram[202] = "0b110000100110000001100110";
        ram[203] = "0b110000100110000001100110";
        for (unsigned i = 204; i < 210 ; i = i + 1) {
            ram[i] = "0b100100100010000010111111";
        }
        ram[210] = "0b110000000110000001100100";
        ram[211] = "0b110000000110000001100100";
        ram[212] = "0b110000000110000001100100";
        ram[213] = "0b110000000110000001100100";
        for (unsigned i = 214; i < 220 ; i = i + 1) {
            ram[i] = "0b100100000010000010111111";
        }
        ram[220] = "0b101101000101000001100110";
        ram[221] = "0b101101000101000001100110";
        ram[222] = "0b101101000101000001100110";
        ram[223] = "0b101101000101000001100110";
        for (unsigned i = 224; i < 230 ; i = i + 1) {
            ram[i] = "0b100001110001000010111111";
        }
        ram[230] = "0b101100010101000001101011";
        ram[231] = "0b101100010101000001101011";
        ram[232] = "0b101100010101000001101011";
        ram[233] = "0b101100010101000001101011";
        for (unsigned i = 234; i < 240 ; i = i + 1) {
            ram[i] = "0b100001000001000011000000";
        }
        ram[240] = "0b100011000101000001110111";
        ram[241] = "0b100011000101000001110111";
        ram[242] = "0b100011000101000001110111";
        ram[243] = "0b100011000101000001110111";
        for (unsigned i = 244; i < 250 ; i = i + 1) {
            ram[i] = "0b110100100010000011000001";
        }
        ram[250] = "0b100111010101000001110000";
        ram[251] = "0b100111010101000001110000";
        ram[252] = "0b100111010101000001110000";
        ram[253] = "0b100111010101000001110000";
        for (unsigned i = 254; i < 260 ; i = i + 1) {
            ram[i] = "0b111010110010000011000000";
        }
        ram[260] = "0b110010110110000001011001";
        ram[261] = "0b110010110110000001011001";
        ram[262] = "0b110010110110000001011001";
        ram[263] = "0b110010110110000001011001";
        for (unsigned i = 264; i < 270 ; i = i + 1) {
            ram[i] = "0b100110000010000010111110";
        }
        ram[270] = "0b110000110110000001100111";
        ram[271] = "0b110000110110000001100111";
        ram[272] = "0b110000110110000001100111";
        ram[273] = "0b110000110110000001100111";
        for (unsigned i = 274; i < 280 ; i = i + 1) {
            ram[i] = "0b100100110010000010111111";
        }
        ram[280] = "0b101011100101000001100110";
        ram[281] = "0b101011100101000001100110";
        ram[282] = "0b101011100101000001100110";
        ram[283] = "0b101011100101000001100110";
        for (unsigned i = 284; i < 290 ; i = i + 1) {
            ram[i] = "0b100000110001000010111111";
        }
        ram[290] = "0b110011110101000001101111";
        ram[291] = "0b110011110101000001101111";
        ram[292] = "0b110011110101000001101111";
        ram[293] = "0b110011110101000001101111";
        for (unsigned i = 294; i < 300 ; i = i + 1) {
            ram[i] = "0b100111000001000011000000";
        }
        ram[300] = "0b101011010101000001100010";
        ram[301] = "0b101011010101000001100010";
        ram[302] = "0b101011010101000001100010";
        ram[303] = "0b101011010101000001100010";
        for (unsigned i = 304; i < 310 ; i = i + 1) {
            ram[i] = "0b100000100001000010111111";
        }
        ram[310] = "0b100000110101000001101001";
        ram[311] = "0b100000110101000001101001";
        ram[312] = "0b100000110101000001101001";
        ram[313] = "0b100000110101000001101001";
        for (unsigned i = 314; i < 320 ; i = i + 1) {
            ram[i] = "0b110001000010000011000000";
        }
        ram[320] = "0b100001100101000001001110";
        ram[321] = "0b100001100101000001001110";
        ram[322] = "0b100001100101000001001110";
        ram[323] = "0b100001100101000001001110";
        for (unsigned i = 324; i < 330 ; i = i + 1) {
            ram[i] = "0b110010010010000010111101";
        }
        ram[330] = "0b100001010101000001100111";
        ram[331] = "0b100001010101000001100111";
        ram[332] = "0b100001010101000001100111";
        ram[333] = "0b100001010101000001100111";
        for (unsigned i = 334; i < 340 ; i = i + 1) {
            ram[i] = "0b110010000010000010111111";
        }
        ram[340] = "0b110111110110000001101011";
        ram[341] = "0b110111110110000001101011";
        ram[342] = "0b110111110110000001101011";
        ram[343] = "0b110111110110000001101011";
        for (unsigned i = 344; i < 350 ; i = i + 1) {
            ram[i] = "0b101001110010000011000000";
        }
        ram[350] = "0b110100000110000001110000";
        ram[351] = "0b110100000110000001110000";
        ram[352] = "0b110100000110000001110000";
        ram[353] = "0b110100000110000001110000";
        for (unsigned i = 354; i < 360 ; i = i + 1) {
            ram[i] = "0b100111000010000011000000";
        }
        ram[360] = "0b101011010101000001011110";
        ram[361] = "0b101011010101000001011110";
        ram[362] = "0b101011010101000001011110";
        ram[363] = "0b101011010101000001011110";
        for (unsigned i = 364; i < 370 ; i = i + 1) {
            ram[i] = "0b100000100001000010111111";
        }
        ram[370] = "0b101011000101000001110010";
        ram[371] = "0b101011000101000001110010";
        ram[372] = "0b101011000101000001110010";
        ram[373] = "0b101011000101000001110010";
        for (unsigned i = 374; i < 380 ; i = i + 1) {
            ram[i] = "0b100000010001000011000000";
        }
        ram[380] = "0b110001010101000001101101";
        ram[381] = "0b110001010101000001101101";
        ram[382] = "0b110001010101000001101101";
        ram[383] = "0b110001010101000001101101";
        for (unsigned i = 384; i < 390 ; i = i + 1) {
            ram[i] = "0b100101000001000011000000";
        }
        ram[390] = "0b101111100101000001100011";
        ram[391] = "0b101111100101000001100011";
        ram[392] = "0b101111100101000001100011";
        ram[393] = "0b101111100101000001100011";
        for (unsigned i = 394; i < 400 ; i = i + 1) {
            ram[i] = "0b100011110001000010111111";
        }
        ram[400] = "0b111010010110000001111101";
        ram[401] = "0b111010010110000001111101";
        ram[402] = "0b111010010110000001111101";
        ram[403] = "0b111010010110000001111101";
        for (unsigned i = 404; i < 410 ; i = i + 1) {
            ram[i] = "0b101011110010000011000001";
        }
        ram[410] = "0b100001010101000001110001";
        ram[411] = "0b100001010101000001110001";
        ram[412] = "0b100001010101000001110001";
        ram[413] = "0b100001010101000001110001";
        for (unsigned i = 414; i < 420 ; i = i + 1) {
            ram[i] = "0b110010000010000011000000";
        }
        ram[420] = "0b100111100101000001110111";
        ram[421] = "0b100111100101000001110111";
        ram[422] = "0b100111100101000001110111";
        ram[423] = "0b100111100101000001110111";
        for (unsigned i = 424; i < 430 ; i = i + 1) {
            ram[i] = "0b111011010010000011000001";
        }
        ram[430] = "0b101111110101000001100101";
        ram[431] = "0b101111110101000001100101";
        ram[432] = "0b101111110101000001100101";
        ram[433] = "0b101111110101000001100101";
        for (unsigned i = 434; i < 440 ; i = i + 1) {
            ram[i] = "0b100011110001000010111111";
        }
        ram[440] = "0b111010000110000001111010";
        ram[441] = "0b111010000110000001111010";
        ram[442] = "0b111010000110000001111010";
        ram[443] = "0b111010000110000001111010";
        for (unsigned i = 444; i < 450 ; i = i + 1) {
            ram[i] = "0b101011100010000011000001";
        }
        ram[450] = "0b110101110101000001110001";
        ram[451] = "0b110101110101000001110001";
        ram[452] = "0b110101110101000001110001";
        ram[453] = "0b110101110101000001110001";
        for (unsigned i = 454; i < 460 ; i = i + 1) {
            ram[i] = "0b101000010001000011000000";
        }
        ram[460] = "0b100010110101000001101101";
        ram[461] = "0b100010110101000001101101";
        ram[462] = "0b100010110101000001101101";
        ram[463] = "0b100010110101000001101101";
        for (unsigned i = 464; i < 470 ; i = i + 1) {
            ram[i] = "0b110100000010000011000000";
        }
        ram[470] = "0b111000000110000001110010";
        ram[471] = "0b111000000110000001110010";
        ram[472] = "0b111000000110000001110010";
        ram[473] = "0b111000000110000001110010";
        for (unsigned i = 474; i < 480 ; i = i + 1) {
            ram[i] = "0b101010000010000011000000";
        }
        ram[480] = "0b100101010101000001101110";
        ram[481] = "0b100101010101000001101110";
        ram[482] = "0b100101010101000001101110";
        ram[483] = "0b100101010101000001101110";
        for (unsigned i = 484; i < 490 ; i = i + 1) {
            ram[i] = "0b111000000010000011000000";
        }
        ram[490] = "0b111011010110000001101111";
        ram[491] = "0b111011010110000001101111";
        ram[492] = "0b111011010110000001101111";
        ram[493] = "0b111011010110000001101111";
        for (unsigned i = 494; i < 500 ; i = i + 1) {
            ram[i] = "0b101100100010000011000000";
        }
        ram[500] = "0b101111000110000001100110";
        ram[501] = "0b101111000110000001100110";
        ram[502] = "0b101111000110000001100110";
        ram[503] = "0b101111000110000001100110";
        for (unsigned i = 504; i < 510 ; i = i + 1) {
            ram[i] = "0b100011010010000010111111";
        }
        ram[510] = "0b110100000110000001100111";
        ram[511] = "0b110100000110000001100111";
        ram[512] = "0b110100000110000001100111";
        ram[513] = "0b110100000110000001100111";
        for (unsigned i = 514; i < 520 ; i = i + 1) {
            ram[i] = "0b100111000010000010111111";
        }
        ram[520] = "0b110001110101000001101001";
        ram[521] = "0b110001110101000001101001";
        ram[522] = "0b110001110101000001101001";
        ram[523] = "0b110001110101000001101001";
        ram[524] = "0b110001110100000010011000";
        for (unsigned i = 525; i < 530 ; i = i + 1) {
            ram[i] = "0b100101010001000011000000";
        }
        ram[530] = "0b111111000110000001110010";
        ram[531] = "0b111111000110000001110010";
        ram[532] = "0b111111000110000001110010";
        ram[533] = "0b111111000110000001110010";
        for (unsigned i = 534; i < 540 ; i = i + 1) {
            ram[i] = "0b101111010010000011000000";
        }
        ram[540] = "0b110011010101000001110011";
        ram[541] = "0b110011010101000001110011";
        ram[542] = "0b110011010101000001110011";
        ram[543] = "0b110011010101000001110011";
        for (unsigned i = 544; i < 550 ; i = i + 1) {
            ram[i] = "0b100110100001000011000000";
        }
        ram[550] = "0b111101000110000001110110";
        ram[551] = "0b111101000110000001110110";
        ram[552] = "0b111101000110000001110110";
        ram[553] = "0b111101000110000001110110";
        for (unsigned i = 554; i < 560 ; i = i + 1) {
            ram[i] = "0b101101110010000011000001";
        }
        ram[560] = "0b110011100110000001101001";
        ram[561] = "0b110011100110000001101001";
        ram[562] = "0b110011100110000001101001";
        ram[563] = "0b110011100110000001101001";
        for (unsigned i = 564; i < 570 ; i = i + 1) {
            ram[i] = "0b100110110010000011000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();


SC_METHOD(prc_write_2);
  sensitive<<clk.pos();


SC_METHOD(prc_write_3);
  sensitive<<clk.pos();


SC_METHOD(prc_write_4);
  sensitive<<clk.pos();


SC_METHOD(prc_write_5);
  sensitive<<clk.pos();


SC_METHOD(prc_write_6);
  sensitive<<clk.pos();


SC_METHOD(prc_write_7);
  sensitive<<clk.pos();


SC_METHOD(prc_write_8);
  sensitive<<clk.pos();


SC_METHOD(prc_write_9);
  sensitive<<clk.pos();


SC_METHOD(prc_write_10);
  sensitive<<clk.pos();


SC_METHOD(prc_write_11);
  sensitive<<clk.pos();


SC_METHOD(prc_write_12);
  sensitive<<clk.pos();


SC_METHOD(prc_write_13);
  sensitive<<clk.pos();


SC_METHOD(prc_write_14);
  sensitive<<clk.pos();


SC_METHOD(prc_write_15);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


void prc_write_2()
{
    if (ce2.read() == sc_dt::Log_1) 
    {
            if(address2.read().is_01() && address2.read().to_uint()<AddressRange)
              q2 = ram[address2.read().to_uint()];
            else
              q2 = sc_lv<DataWidth>();
    }
}


void prc_write_3()
{
    if (ce3.read() == sc_dt::Log_1) 
    {
            if(address3.read().is_01() && address3.read().to_uint()<AddressRange)
              q3 = ram[address3.read().to_uint()];
            else
              q3 = sc_lv<DataWidth>();
    }
}


void prc_write_4()
{
    if (ce4.read() == sc_dt::Log_1) 
    {
            if(address4.read().is_01() && address4.read().to_uint()<AddressRange)
              q4 = ram[address4.read().to_uint()];
            else
              q4 = sc_lv<DataWidth>();
    }
}


void prc_write_5()
{
    if (ce5.read() == sc_dt::Log_1) 
    {
            if(address5.read().is_01() && address5.read().to_uint()<AddressRange)
              q5 = ram[address5.read().to_uint()];
            else
              q5 = sc_lv<DataWidth>();
    }
}


void prc_write_6()
{
    if (ce6.read() == sc_dt::Log_1) 
    {
            if(address6.read().is_01() && address6.read().to_uint()<AddressRange)
              q6 = ram[address6.read().to_uint()];
            else
              q6 = sc_lv<DataWidth>();
    }
}


void prc_write_7()
{
    if (ce7.read() == sc_dt::Log_1) 
    {
            if(address7.read().is_01() && address7.read().to_uint()<AddressRange)
              q7 = ram[address7.read().to_uint()];
            else
              q7 = sc_lv<DataWidth>();
    }
}


void prc_write_8()
{
    if (ce8.read() == sc_dt::Log_1) 
    {
            if(address8.read().is_01() && address8.read().to_uint()<AddressRange)
              q8 = ram[address8.read().to_uint()];
            else
              q8 = sc_lv<DataWidth>();
    }
}


void prc_write_9()
{
    if (ce9.read() == sc_dt::Log_1) 
    {
            if(address9.read().is_01() && address9.read().to_uint()<AddressRange)
              q9 = ram[address9.read().to_uint()];
            else
              q9 = sc_lv<DataWidth>();
    }
}


void prc_write_10()
{
    if (ce10.read() == sc_dt::Log_1) 
    {
            if(address10.read().is_01() && address10.read().to_uint()<AddressRange)
              q10 = ram[address10.read().to_uint()];
            else
              q10 = sc_lv<DataWidth>();
    }
}


void prc_write_11()
{
    if (ce11.read() == sc_dt::Log_1) 
    {
            if(address11.read().is_01() && address11.read().to_uint()<AddressRange)
              q11 = ram[address11.read().to_uint()];
            else
              q11 = sc_lv<DataWidth>();
    }
}


void prc_write_12()
{
    if (ce12.read() == sc_dt::Log_1) 
    {
            if(address12.read().is_01() && address12.read().to_uint()<AddressRange)
              q12 = ram[address12.read().to_uint()];
            else
              q12 = sc_lv<DataWidth>();
    }
}


void prc_write_13()
{
    if (ce13.read() == sc_dt::Log_1) 
    {
            if(address13.read().is_01() && address13.read().to_uint()<AddressRange)
              q13 = ram[address13.read().to_uint()];
            else
              q13 = sc_lv<DataWidth>();
    }
}


void prc_write_14()
{
    if (ce14.read() == sc_dt::Log_1) 
    {
            if(address14.read().is_01() && address14.read().to_uint()<AddressRange)
              q14 = ram[address14.read().to_uint()];
            else
              q14 = sc_lv<DataWidth>();
    }
}


void prc_write_15()
{
    if (ce15.read() == sc_dt::Log_1) 
    {
            if(address15.read().is_01() && address15.read().to_uint()<AddressRange)
              q15 = ram[address15.read().to_uint()];
            else
              q15 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(algo_unpacked_coedEe) {


static const unsigned DataWidth = 24;
static const unsigned AddressRange = 570;
static const unsigned AddressWidth = 10;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in <sc_lv<AddressWidth> > address2;
sc_core::sc_in<sc_logic> ce2;
sc_core::sc_out <sc_lv<DataWidth> > q2;
sc_core::sc_in <sc_lv<AddressWidth> > address3;
sc_core::sc_in<sc_logic> ce3;
sc_core::sc_out <sc_lv<DataWidth> > q3;
sc_core::sc_in <sc_lv<AddressWidth> > address4;
sc_core::sc_in<sc_logic> ce4;
sc_core::sc_out <sc_lv<DataWidth> > q4;
sc_core::sc_in <sc_lv<AddressWidth> > address5;
sc_core::sc_in<sc_logic> ce5;
sc_core::sc_out <sc_lv<DataWidth> > q5;
sc_core::sc_in <sc_lv<AddressWidth> > address6;
sc_core::sc_in<sc_logic> ce6;
sc_core::sc_out <sc_lv<DataWidth> > q6;
sc_core::sc_in <sc_lv<AddressWidth> > address7;
sc_core::sc_in<sc_logic> ce7;
sc_core::sc_out <sc_lv<DataWidth> > q7;
sc_core::sc_in <sc_lv<AddressWidth> > address8;
sc_core::sc_in<sc_logic> ce8;
sc_core::sc_out <sc_lv<DataWidth> > q8;
sc_core::sc_in <sc_lv<AddressWidth> > address9;
sc_core::sc_in<sc_logic> ce9;
sc_core::sc_out <sc_lv<DataWidth> > q9;
sc_core::sc_in <sc_lv<AddressWidth> > address10;
sc_core::sc_in<sc_logic> ce10;
sc_core::sc_out <sc_lv<DataWidth> > q10;
sc_core::sc_in <sc_lv<AddressWidth> > address11;
sc_core::sc_in<sc_logic> ce11;
sc_core::sc_out <sc_lv<DataWidth> > q11;
sc_core::sc_in <sc_lv<AddressWidth> > address12;
sc_core::sc_in<sc_logic> ce12;
sc_core::sc_out <sc_lv<DataWidth> > q12;
sc_core::sc_in <sc_lv<AddressWidth> > address13;
sc_core::sc_in<sc_logic> ce13;
sc_core::sc_out <sc_lv<DataWidth> > q13;
sc_core::sc_in <sc_lv<AddressWidth> > address14;
sc_core::sc_in<sc_logic> ce14;
sc_core::sc_out <sc_lv<DataWidth> > q14;
sc_core::sc_in <sc_lv<AddressWidth> > address15;
sc_core::sc_in<sc_logic> ce15;
sc_core::sc_out <sc_lv<DataWidth> > q15;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


algo_unpacked_coedEe_ram* meminst;


SC_CTOR(algo_unpacked_coedEe) {
meminst = new algo_unpacked_coedEe_ram("algo_unpacked_coedEe_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->address2(address2);
meminst->ce2(ce2);
meminst->q2(q2);

meminst->address3(address3);
meminst->ce3(ce3);
meminst->q3(q3);

meminst->address4(address4);
meminst->ce4(ce4);
meminst->q4(q4);

meminst->address5(address5);
meminst->ce5(ce5);
meminst->q5(q5);

meminst->address6(address6);
meminst->ce6(ce6);
meminst->q6(q6);

meminst->address7(address7);
meminst->ce7(ce7);
meminst->q7(q7);

meminst->address8(address8);
meminst->ce8(ce8);
meminst->q8(q8);

meminst->address9(address9);
meminst->ce9(ce9);
meminst->q9(q9);

meminst->address10(address10);
meminst->ce10(ce10);
meminst->q10(q10);

meminst->address11(address11);
meminst->ce11(ce11);
meminst->q11(q11);

meminst->address12(address12);
meminst->ce12(ce12);
meminst->q12(q12);

meminst->address13(address13);
meminst->ce13(ce13);
meminst->q13(q13);

meminst->address14(address14);
meminst->ce14(ce14);
meminst->q14(q14);

meminst->address15(address15);
meminst->ce15(ce15);
meminst->q15(q15);

meminst->reset(reset);
meminst->clk(clk);
}
~algo_unpacked_coedEe() {
    delete meminst;
}


};//endmodule
#endif
